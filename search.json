[{"path":"https://acare.github.io/hacksig/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 hacksig authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://acare.github.io/hacksig/articles/hacksig.html","id":"available-signatures-from-the-literature","dir":"Articles","previous_headings":"","what":"Available signatures from the literature","title":"Introduction to hacksig","text":"order get complete list implemented signatures, can use get_sig_info(). returns tibble useful information: signature_id; string keywords associated signature (separated “pipe” | symbol); publication_doi linking original publication; brief description. want get list gene symbols one implemented signatures, use get_sig_genes() valid keywords:","code":"get_sig_info() #> # A tibble: 40 × 4 #>   signature_id       signature_keywords              publication_doi description #>   <chr>              <chr>                           <chr>           <chr>       #> 1 ayers2017_immexp   ayers2017_immexp|immune expand… 10.1172/JCI911… Immune exp… #> 2 bai2019_immune     bai2019_immune|head and neck s… 10.1155/2019/3… Immune/inf… #> 3 cinsarc            cinsarc|metastasis|sarcoma|sts  10.1038/nm.2174 Biomarker … #> 4 dececco2014_int172 dececco2014_int172|head and ne… 10.1093/annonc… Signature … #> 5 eschrich2009_rsi   eschrich2009_rsi|radioresistan… 10.1016/j.ijro… Genes aime… #> # ℹ 35 more rows get_sig_genes(\"ifng\") #> $muro2016_ifng #> [1] \"CXCL10\"  \"CXCL9\"   \"HLA-DRA\" \"IDO1\"    \"IFNG\"    \"STAT1\""},{"path":"https://acare.github.io/hacksig/articles/hacksig.html","id":"check-your-signatures","dir":"Articles","previous_headings":"","what":"Check your signatures","title":"Introduction to hacksig","text":"first thing computing scores signature check many genes present data. accomplish , can use check_sig() normalized gene expression matrix (either microarray RNA-seq normalized data), must formatted object class matrix data.frame gene symbols row names sample IDs column names. tutorial, use test_expr (R object included hacksig) example gene expression matrix 20 simulated samples. default, check_sig() compute statistics every signature implemented hacksig. can filter specific signatures entering keywords signatures argument (partial matching regular expressions work ): can also check signatures implemented hacksig, custom signatures. example, can use msigdbr package download Hallmark gene set collection tibble transform list: Missing genes HALLMARK_NOTCH_SIGNALING gene set :","code":"check_sig(test_expr) #> # A tibble: 40 × 5 #>   signature_id     n_genes n_present frac_present missing_genes #>   <chr>              <int>     <int>        <dbl> <list>        #> 1 wu2020_metabolic      30        20        0.667 <chr [10]>    #> 2 muro2016_ifng          6         4        0.667 <chr [2]>     #> 3 liu2020_immune         6         4        0.667 <chr [2]>     #> 4 liu2021_mgs            6         4        0.667 <chr [2]>     #> 5 lu2020_npc             3         2        0.667 <chr [1]>     #> # ℹ 35 more rows check_sig(test_expr, signatures = c(\"metab\", \"cinsarc\")) #> # A tibble: 2 × 5 #>   signature_id     n_genes n_present frac_present missing_genes #>   <chr>              <int>     <int>        <dbl> <list>        #> 1 wu2020_metabolic      30        20        0.667 <chr [10]>    #> 2 cinsarc               67        40        0.597 <chr [27]> hallmark_list <- msigdbr(species = \"Homo sapiens\", collection = \"H\") %>%     distinct(gs_name, gene_symbol) %>%     nest(genes = c(gene_symbol)) %>%     mutate(genes = map(genes, compose(as_vector, unname))) %>%     deframe() #> The 'msigdbdf' package must be installed to access the full dataset. #> Please run the following command to install the 'msigdbdf' package: #> install.packages('msigdbdf', repos = 'https://igordot.r-universe.dev')  check_sig(test_expr, hallmark_list) #> # A tibble: 50 × 5 #>   signature_id                      n_genes n_present frac_present missing_genes #>   <chr>                               <int>     <int>        <dbl> <list>        #> 1 HALLMARK_WNT_BETA_CATENIN_SIGNAL…      42        27        0.643 <chr [15]>    #> 2 HALLMARK_APICAL_SURFACE                44        28        0.636 <chr [16]>    #> 3 HALLMARK_BILE_ACID_METABOLISM         112        70        0.625 <chr [42]>    #> 4 HALLMARK_NOTCH_SIGNALING               32        20        0.625 <chr [12]>    #> 5 HALLMARK_PI3K_AKT_MTOR_SIGNALING      105        65        0.619 <chr [40]>    #> # ℹ 45 more rows check_sig(test_expr, hallmark_list) %>%      filter(signature_id == \"HALLMARK_NOTCH_SIGNALING\") %>%      pull(missing_genes) #> [[1]] #>  [1] \"FZD5\"    \"HEYL\"    \"KAT2A\"   \"MAML2\"   \"NOTCH1\"  \"NOTCH3\"  \"PPARD\"   #>  [8] \"PRKCA\"   \"PSEN2\"   \"SAP30\"   \"ST3GAL6\" \"TCF7L2\""},{"path":[]},{"path":"https://acare.github.io/hacksig/articles/hacksig.html","id":"hack_sig","dir":"Articles","previous_headings":"Compute single sample scores","what":"hack_sig","title":"Introduction to hacksig","text":"main function package, hack_sig(), permits obtain single sample scores gene signatures. default, compute scores signatures implemented package original publication method. can also filter specific signatures (e.g. immune stromal ESTIMATE signatures) choose particular single sample method: Valid choices single sample methods : \"zscore\", combined z-score; \"ssgsea\", single sample GSEA; \"singscore\", singscore method. Run ?hack_sig see additional parameter specifications methods. check_sig(), argument signatures can also list gene signatures. example, can compute normalized single sample GSEA scores Hallmark gene sets: three methods hack_sig() used compute gene signature scores original method. : CINSARC, ESTIMATE Immunophenoscore.","code":"hack_sig(test_expr) #> Warning: ℹ No genes are present in 'expr_data' for the following signatures: #> ✖ zhu2021_ferroptosis #> ✖ rooney2015_cyt #> ℹ To obtain CINSARC, ESTIMATE and Immunophenoscore with the original procedures, see: #> ?hack_cinsarc #> ?hack_estimate #> ?hack_immunophenoscore #> # A tibble: 20 × 32 #>   sample_id ayers2017_immexp bai2019_immune dececco2014_int172 eschrich2009_rsi #>   <chr>                <dbl>          <dbl>              <dbl>            <dbl> #> 1 sample1               5.71          -22.3               2.62           0.0289 #> 2 sample10              6.96          -23.0               2.69           0.415  #> 3 sample11              8.06          -19.9               1.73           0.542  #> 4 sample12              8.57          -23.8               2.35           0.287  #> 5 sample13              6.35          -25.9               2.36           0.583  #> # ℹ 15 more rows #> # ℹ 27 more variables: eustace2013_hypoxia <dbl>, fan2021_ferroptosis <dbl>, #> #   fang2021_irgs <dbl>, han2021_ferroptosis <dbl>, he2021_ferroptosis_a <dbl>, #> #   he2021_ferroptosis_b <dbl>, hu2021_derbp <dbl>, #> #   huang2022_ferroptosis <dbl>, li2021_ferroptosis_a <dbl>, #> #   li2021_ferroptosis_b <dbl>, li2021_ferroptosis_c <dbl>, #> #   li2021_ferroptosis_d <dbl>, li2021_irgs <dbl>, liu2020_immune <dbl>, … hack_sig(test_expr, signatures = \"estimate\", method = \"zscore\") #> # A tibble: 20 × 3 #>   sample_id estimate_immune estimate_stromal #>   <chr>               <dbl>            <dbl> #> 1 sample1            -2.65            -0.262 #> 2 sample10            1.37             0.305 #> 3 sample11            1.50            -0.959 #> 4 sample12            1.65            -1.22  #> 5 sample13           -0.535           -0.743 #> # ℹ 15 more rows hack_sig(test_expr, hallmark_list,           method = \"ssgsea\", sample_norm = \"separate\", alpha = 0.5) #> # A tibble: 20 × 51 #>   sample_id HALLMARK_ADIPOGENESIS HALLMARK_ALLOGRAFT_RE…¹ HALLMARK_ANDROGEN_RE…² #>   <chr>                     <dbl>                   <dbl>                  <dbl> #> 1 sample1                   0.683                   0.419                  0.943 #> 2 sample10                  0.384                   0.790                  0.300 #> 3 sample11                  0.249                   0.756                  0.646 #> 4 sample12                  0.998                   1                      0.959 #> 5 sample13                  0.785                   0                      0.373 #> # ℹ 15 more rows #> # ℹ abbreviated names: ¹​HALLMARK_ALLOGRAFT_REJECTION, #> #   ²​HALLMARK_ANDROGEN_RESPONSE #> # ℹ 47 more variables: HALLMARK_ANGIOGENESIS <dbl>, #> #   HALLMARK_APICAL_JUNCTION <dbl>, HALLMARK_APICAL_SURFACE <dbl>, #> #   HALLMARK_APOPTOSIS <dbl>, HALLMARK_BILE_ACID_METABOLISM <dbl>, #> #   HALLMARK_CHOLESTEROL_HOMEOSTASIS <dbl>, HALLMARK_COAGULATION <dbl>, …"},{"path":"https://acare.github.io/hacksig/articles/hacksig.html","id":"hack_cinsarc","dir":"Articles","previous_headings":"Compute single sample scores","what":"hack_cinsarc","title":"Introduction to hacksig","text":"CINSARC classification, must provide vector distant metastasis status:","code":"set.seed(123) rand_dm <- sample(c(0, 1), size = ncol(test_expr), replace = TRUE) hack_cinsarc(test_expr, rand_dm) #> # A tibble: 20 × 2 #>   sample_id cinsarc_class #>   <chr>     <chr>         #> 1 sample1   C2            #> 2 sample2   C1            #> 3 sample3   C2            #> 4 sample4   C1            #> 5 sample5   C2            #> # ℹ 15 more rows"},{"path":"https://acare.github.io/hacksig/articles/hacksig.html","id":"hack_estimate","dir":"Articles","previous_headings":"Compute single sample scores","what":"hack_estimate","title":"Introduction to hacksig","text":"Immune, stromal, ESTIMATE tumor purity scores ESTIMATE method can obtained :","code":"hack_estimate(test_expr) #> # A tibble: 20 × 5 #>   sample_id immune_score stroma_score estimate_score purity_score #>   <chr>            <dbl>        <dbl>          <dbl>        <dbl> #> 1 sample1          -636.         778.           142.        0.811 #> 2 sample10         1590.        1297.          2887.        0.516 #> 3 sample11         2040.         512.          2552.        0.557 #> 4 sample12         1835.         772.          2607.        0.551 #> 5 sample13          632.         778.          1409.        0.688 #> # ℹ 15 more rows"},{"path":"https://acare.github.io/hacksig/articles/hacksig.html","id":"hack_immunophenoscore","dir":"Articles","previous_headings":"Compute single sample scores","what":"hack_immunophenoscore","title":"Introduction to hacksig","text":"Finally, raw immunophenoscore discrete (0-10 normalized) counterpart can obtained : can also obtain biomarker scores :","code":"hack_immunophenoscore(test_expr) #> # A tibble: 20 × 3 #>   sample_id raw_score ips_score #>   <fct>         <dbl>     <dbl> #> 1 sample1      0.942          3 #> 2 sample2     -0.348          0 #> 3 sample3      0.0939         0 #> 4 sample4     -0.335          0 #> 5 sample5      1.64           5 #> # ℹ 15 more rows hack_immunophenoscore(test_expr, extract = \"all\") #> # A tibble: 20 × 19 #>   sample_id act_cd4_score act_cd8_score b2m_score cd27_score icos_score #>   <fct>             <dbl>         <dbl>     <dbl>      <dbl>      <dbl> #> 1 sample1          0.0793       -0.335      0.312     -0.868     -0.768 #> 2 sample2         -0.0165       -0.308     -0.796      0.195      0.909 #> 3 sample3          0.539         0.0393    -0.483      0.525     -0.457 #> 4 sample4          0.398         0.383     -0.777      0.699      0.658 #> 5 sample5         -0.0496        0.137      0.876      0.373      0.251 #> # ℹ 15 more rows #> # ℹ 13 more variables: mdsc_score <dbl>, pd1_score <dbl>, pdl2_score <dbl>, #> #   tem_cd4_score <dbl>, tem_cd8_score <dbl>, tigit_score <dbl>, #> #   treg_score <dbl>, raw_score <dbl>, ips_score <dbl>, cp_score <dbl>, #> #   ec_score <dbl>, mhc_score <dbl>, sc_score <dbl>"},{"path":"https://acare.github.io/hacksig/articles/hacksig.html","id":"stratify-your-samples","dir":"Articles","previous_headings":"","what":"Stratify your samples","title":"Introduction to hacksig","text":"want categorize samples two signature classes based score cutoff, can use stratify_sig() hack_sig(): default, stratify_sig() stratify samples either original publication method () median score (otherwise). stratify_sig() work signatures implemented hacksig.","code":"test_expr %>%      hack_sig(\"estimate\", method = \"singscore\", direction = \"up\") %>%      stratify_sig() #> # A tibble: 20 × 3 #>   sample_id estimate_immune estimate_stromal #>   <chr>     <chr>           <chr>            #> 1 sample1   low             low              #> 2 sample10  high            high             #> 3 sample11  high            low              #> 4 sample12  high            low              #> 5 sample13  low             low              #> # ℹ 15 more rows"},{"path":"https://acare.github.io/hacksig/articles/hacksig.html","id":"speed-up-computation-time","dir":"Articles","previous_headings":"","what":"Speed-up computation time","title":"Introduction to hacksig","text":"rank-based single sample method implementations (.e. single sample GSEA singscore) slower counterparts implemented GSVA singscore. Hence, speed-computation time can use future package:","code":"plan(multisession) hack_sig(test_expr, hallmark_list, method = \"ssgsea\") #> # A tibble: 20 × 51 #>   sample_id HALLMARK_ADIPOGENESIS HALLMARK_ALLOGRAFT_RE…¹ HALLMARK_ANDROGEN_RE…² #>   <chr>                     <dbl>                   <dbl>                  <dbl> #> 1 sample1                   1593.                    709.                 2013.  #> 2 sample10                   739.                   1476.                   37.4 #> 3 sample11                   572.                   1497.                 1083.  #> 4 sample12                  2426.                   1964.                 2168.  #> 5 sample13                  1822.                    101.                  166.  #> # ℹ 15 more rows #> # ℹ abbreviated names: ¹​HALLMARK_ALLOGRAFT_REJECTION, #> #   ²​HALLMARK_ANDROGEN_RESPONSE #> # ℹ 47 more variables: HALLMARK_ANGIOGENESIS <dbl>, #> #   HALLMARK_APICAL_JUNCTION <dbl>, HALLMARK_APICAL_SURFACE <dbl>, #> #   HALLMARK_APOPTOSIS <dbl>, HALLMARK_BILE_ACID_METABOLISM <dbl>, #> #   HALLMARK_CHOLESTEROL_HOMEOSTASIS <dbl>, HALLMARK_COAGULATION <dbl>, …"},{"path":"https://acare.github.io/hacksig/articles/hacksig.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Introduction to hacksig","text":"Let’s say want compute single sample scores KEGG gene set collection correlate scores tumor purity given ESTIMATE method. First, get KEGG list use check_sig() keep gene sets whose genes 2/3 present gene expression matrix. , apply combined z-score ssGSEA method resulting list 10 KEGG gene sets using purrr::map_dfr(): can transform kegg_scores tibble long format using tidyr::pivot_longer(): Finally, computing tumor purity scores, can merge two data sets plot results:","code":"kegg_list <- msigdbr(species = \"Homo sapiens\", subcollection = \"CP:KEGG_MEDICUS\") %>%     distinct(gs_name, gene_symbol) %>%     nest(genes = c(gene_symbol)) %>%     mutate(genes = map(genes, compose(as_vector, unname))) %>%     deframe() #> The 'msigdbdf' package must be installed to access the full dataset. #> Please run the following command to install the 'msigdbdf' package: #> install.packages('msigdbdf', repos = 'https://igordot.r-universe.dev')  kegg_ok <- check_sig(test_expr, kegg_list) %>%      filter(frac_present > 0.66) %>%      pull(signature_id) kegg_scores <- map(list(zscore = \"zscore\", ssgsea = \"ssgsea\"),                    function(x) {                        hack_sig(test_expr,                                 kegg_list[c(kegg_ok)],                                 method = x,                                 sample_norm = \"separate\")                    }) %>%      bind_rows(.id = \"method\") kegg_scores <- kegg_scores %>%      pivot_longer(starts_with(\"KEGG\"),                   names_to = \"kegg_id\", values_to = \"kegg_score\") purity_scores <- hack_estimate(test_expr) %>% select(sample_id, purity_score)  kegg_scores %>%      left_join(purity_scores, by = \"sample_id\") %>%      ggplot(aes(x = kegg_id, y = kegg_score)) +     geom_boxplot(outlier.alpha = 0) +     geom_jitter(aes(color = purity_score), alpha = 0.8, width = 0.1) +     facet_wrap(facets = vars(method), scales = \"free_x\") +     coord_flip() +     scale_color_viridis_c() +     labs(x = NULL, y = \"enrichment score\", color = \"Tumor purity\") +     theme(legend.position = \"top\")"},{"path":"https://acare.github.io/hacksig/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrea Carenzo. Author, maintainer. Loris De Cecco. Author. Federico Pistore. Author.","code":""},{"path":"https://acare.github.io/hacksig/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Andrea Carenzo, Federico Pistore, Mara S Serafini, Deborah Lenoci, Armando G Licata, Loris De Cecco, hacksig: unified tidy R framework easily compute gene expression signature scores, Bioinformatics, Volume 38, Issue 10, 15 May 2022, Pages 2940–2942, https://doi.org/10.1093/bioinformatics/btac161","code":"@Article{,   title = {hacksig: a unified and tidy R framework to easily compute gene expression signature scores},   author = {Andrea Carenzo and Federico Pistore and Mara S. Serafini and Deborah Lenoci and Armando G. Licata and Loris {De Cecco}},   journal = {Bioinformatics},   doi = {10.1093/bioinformatics/btac161},   year = {2022},   volume = {38},   number = {10},   pages = {2940-2942},   url = {https://doi.org/10.1093/bioinformatics/btac161}, }"},{"path":"https://acare.github.io/hacksig/index.html","id":"hacksig-","dir":"","previous_headings":"","what":"A Tidy Framework to Hack Gene Expression Signatures","title":"A Tidy Framework to Hack Gene Expression Signatures","text":"goal hacksig provide simple tidy interface compute single sample scores gene signatures methods applied cancer transcriptomics. Scores can obtained either custom lists genes manually curated collection gene signatures, including: CINSARC; ESTIMATE; Immunophenoscore; Cytolitic activity; (use get_sig_info() get complete list implemented signatures) present, signature scores can obtained either original publication method using one three single sample scoring alternatives, namely: combined z-score, single sample GSEA singscore.","code":""},{"path":"https://acare.github.io/hacksig/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Tidy Framework to Hack Gene Expression Signatures","text":"can install last stable version hacksig CRAN : development version GitHub :","code":"install.packages(\"hacksig\") # install.packages(\"devtools\") devtools::install_github(\"Acare/hacksig\")"},{"path":"https://acare.github.io/hacksig/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Tidy Framework to Hack Gene Expression Signatures","text":"can learn usage package vignette(\"hacksig\").","code":"library(hacksig) library(dplyr) library(future)"},{"path":"https://acare.github.io/hacksig/index.html","id":"available-signatures","dir":"","previous_headings":"Usage","what":"Available signatures","title":"A Tidy Framework to Hack Gene Expression Signatures","text":"","code":"get_sig_info() #> # A tibble: 40 × 4 #>   signature_id       signature_keywords              publication_doi description #>   <chr>              <chr>                           <chr>           <chr>       #> 1 ayers2017_immexp   ayers2017_immexp|immune expand… 10.1172/JCI911… Immune exp… #> 2 bai2019_immune     bai2019_immune|head and neck s… 10.1155/2019/3… Immune/inf… #> 3 cinsarc            cinsarc|metastasis|sarcoma|sts  10.1038/nm.2174 Biomarker … #> 4 dececco2014_int172 dececco2014_int172|head and ne… 10.1093/annonc… Signature … #> 5 eschrich2009_rsi   eschrich2009_rsi|radioresistan… 10.1016/j.ijro… Genes aime… #> # ℹ 35 more rows"},{"path":"https://acare.github.io/hacksig/index.html","id":"check-your-signatures","dir":"","previous_headings":"Usage","what":"Check your signatures","title":"A Tidy Framework to Hack Gene Expression Signatures","text":"","code":"check_sig(test_expr, signatures = \"estimate\") #> # A tibble: 2 × 5 #>   signature_id     n_genes n_present frac_present missing_genes #>   <chr>              <int>     <int>        <dbl> <list>        #> 1 estimate_stromal     141        91        0.645 <chr [50]>    #> 2 estimate_immune      141        74        0.525 <chr [67]>"},{"path":"https://acare.github.io/hacksig/index.html","id":"compute-single-sample-scores","dir":"","previous_headings":"Usage","what":"Compute single sample scores","title":"A Tidy Framework to Hack Gene Expression Signatures","text":"","code":"hack_sig(test_expr, signatures = c(\"ifng\", \"cinsarc\"), method = \"zscore\") #> # A tibble: 20 × 3 #>   sample_id cinsarc muro2016_ifng #>   <chr>       <dbl>         <dbl> #> 1 sample1   -0.482         -0.511 #> 2 sample10  -0.0926        -1.60  #> 3 sample11   0.730         -1.03  #> 4 sample12  -0.625          0.851 #> 5 sample13   0.930         -0.369 #> # ℹ 15 more rows"},{"path":"https://acare.github.io/hacksig/index.html","id":"stratify-your-samples","dir":"","previous_headings":"Usage","what":"Stratify your samples","title":"A Tidy Framework to Hack Gene Expression Signatures","text":"","code":"test_expr %>%      hack_sig(\"estimate\", method = \"singscore\", direction = \"up\") %>%      stratify_sig(cutoff = \"median\") #> # A tibble: 20 × 3 #>   sample_id estimate_immune estimate_stromal #>   <chr>     <chr>           <chr>            #> 1 sample1   low             low              #> 2 sample10  high            high             #> 3 sample11  high            low              #> 4 sample12  high            low              #> 5 sample13  low             low              #> # ℹ 15 more rows"},{"path":"https://acare.github.io/hacksig/index.html","id":"speed-up-computation-time","dir":"","previous_headings":"Usage","what":"Speed-up computation time","title":"A Tidy Framework to Hack Gene Expression Signatures","text":"","code":"plan(multisession) hack_sig(test_expr, method = \"ssgsea\") #> Warning: ℹ No genes are present in 'expr_data' for the following signatures: #> ✖ zhu2021_ferroptosis #> ✖ rooney2015_cyt #> # A tibble: 20 × 39 #>   sample_id ayers2017_immexp bai2019_immune cinsarc dececco2014_int172 #>   <chr>                <dbl>          <dbl>   <dbl>              <dbl> #> 1 sample1             -3914.          2316.   -13.5              1288. #> 2 sample10             1077.           575.   801.                811. #> 3 sample11              501.          -490.  1340.               1244. #> 4 sample12             2315.          1034.  -151.                981. #> 5 sample13            -2179.           327.  1737.               1288. #> # ℹ 15 more rows #> # ℹ 34 more variables: eschrich2009_rsi <dbl>, estimate_immune <dbl>, #> #   estimate_stromal <dbl>, eustace2013_hypoxia <dbl>, #> #   fan2021_ferroptosis <dbl>, fang2021_irgs <dbl>, han2021_ferroptosis <dbl>, #> #   he2021_ferroptosis_a <dbl>, he2021_ferroptosis_b <dbl>, hu2021_derbp <dbl>, #> #   huang2022_ferroptosis <dbl>, ips_cp <dbl>, ips_ec <dbl>, ips_mhc <dbl>, #> #   ips_sc <dbl>, li2021_ferroptosis_a <dbl>, li2021_ferroptosis_b <dbl>, …"},{"path":"https://acare.github.io/hacksig/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A Tidy Framework to Hack Gene Expression Signatures","text":"suggestions adding new features signatures hacksig, please create issue GitHub. Gene-level information gene signatures stored data-raw/hacksig_signatures.csv can used template requests.","code":""},{"path":"https://acare.github.io/hacksig/reference/check_sig.html","id":null,"dir":"Reference","previous_headings":"","what":"Check signatures feasibility — check_sig","title":"Check signatures feasibility — check_sig","text":"check_sig() helper function shows useful information signatures want test gene expression matrix.","code":""},{"path":"https://acare.github.io/hacksig/reference/check_sig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check signatures feasibility — check_sig","text":"","code":"check_sig(expr_data, signatures = \"all\")"},{"path":"https://acare.github.io/hacksig/reference/check_sig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check signatures feasibility — check_sig","text":"expr_data normalized gene expression matrix (data frame) gene symbols row names samples columns. signatures can list signatures character vector indicating keywords group signatures. default (\"\") cause function check signatures implemented hacksig.","code":""},{"path":"https://acare.github.io/hacksig/reference/check_sig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check signatures feasibility — check_sig","text":"tibble number rows equal number input signatures five columns: signature_id, unique identifier associated signature; n_genes, number genes composing signature; n_present frac_present, number fraction genes signature present expr_data, respectively; missing_genes, missing gene symbols signature.","code":""},{"path":[]},{"path":"https://acare.github.io/hacksig/reference/check_sig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check signatures feasibility — check_sig","text":"","code":"check_sig(test_expr) #> # A tibble: 40 × 5 #>    signature_id              n_genes n_present frac_present missing_genes #>    <chr>                       <int>     <int>        <dbl> <list>        #>  1 wu2020_metabolic               30        20        0.667 <chr [10]>    #>  2 muro2016_ifng                   6         4        0.667 <chr [2]>     #>  3 liu2020_immune                  6         4        0.667 <chr [2]>     #>  4 liu2021_mgs                     6         4        0.667 <chr [2]>     #>  5 lu2020_npc                      3         2        0.667 <chr [1]>     #>  6 estimate_stromal              141        91        0.645 <chr [50]>    #>  7 she2020_irgs                   27        17        0.630 <chr [10]>    #>  8 lohavanichbutr2013_hpvneg      13         8        0.615 <chr [5]>     #>  9 eschrich2009_rsi               10         6        0.6   <chr [4]>     #> 10 li2021_ferroptosis_a           10         6        0.6   <chr [4]>     #> # ℹ 30 more rows check_sig(test_expr, \"estimate\") #> # A tibble: 2 × 5 #>   signature_id     n_genes n_present frac_present missing_genes #>   <chr>              <int>     <int>        <dbl> <list>        #> 1 estimate_stromal     141        91        0.645 <chr [50]>    #> 2 estimate_immune      141        74        0.525 <chr [67]>"},{"path":"https://acare.github.io/hacksig/reference/get_sig_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get signature gene identifiers — get_sig_genes","title":"Get signature gene identifiers — get_sig_genes","text":"Obtain gene signatures implemented hacksig named list gene symbols.","code":""},{"path":"https://acare.github.io/hacksig/reference/get_sig_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get signature gene identifiers — get_sig_genes","text":"","code":"get_sig_genes(keywords = \"all\")"},{"path":"https://acare.github.io/hacksig/reference/get_sig_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get signature gene identifiers — get_sig_genes","text":"keywords character vector indicating keywords group signatures. default (\"\") cause function check signatures implemented hacksig.","code":""},{"path":"https://acare.github.io/hacksig/reference/get_sig_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get signature gene identifiers — get_sig_genes","text":"named list gene signatures.","code":""},{"path":[]},{"path":"https://acare.github.io/hacksig/reference/get_sig_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get signature gene identifiers — get_sig_genes","text":"","code":"get_sig_genes() #> $ayers2017_immexp #>  [1] \"CCL5\"    \"CD2\"     \"CD3D\"    \"CD3E\"    \"CIITA\"   \"CXCL10\"  \"CXCL13\"  #>  [8] \"CXCR6\"   \"GZMB\"    \"GZMK\"    \"HLA-DRA\" \"HLA-E\"   \"IDO1\"    \"IL2RG\"   #> [15] \"LAG3\"    \"NKG7\"    \"STAT1\"   \"TAGAP\"   #>  #> $bai2019_immune #>  [1] \"BATF\"    \"CCL11\"   \"CCR4\"    \"CCR7\"    \"CD27\"    \"CD79B\"   \"CMA1\"    #>  [8] \"CNR2\"    \"CTLA4\"   \"CTSG\"    \"GZMM\"    \"IL16\"    \"IL19\"    \"MASP1\"   #> [15] \"PGLYRP4\" \"SAA1\"    \"TNFAIP3\" \"TREML1\"  #>  #> $cinsarcdececco2014_int172 #>   [1] \"ABI2\"       \"ACSL3\"      \"AKNA\"       \"ALS2\"       \"AMPD3\"      #>   [6] \"AP3D1\"      \"ARHGAP30\"   \"ARHGEF40\"   \"ARMCX1\"     \"ARMCX4\"     #>  [11] \"B4GAT1\"     \"BBS9\"       \"BCL2L1\"     \"BEX3\"       \"BOD1\"       #>  [16] \"C11orf49\"   \"CACTIN\"     \"CADM1\"      \"CAMLG\"      \"CARMIL2\"    #>  [21] \"CARS2\"      \"CCDC43\"     \"CD101\"      \"CD200R1\"    \"CD6\"        #>  [26] \"CD84\"       \"CENPBD1\"    \"CFDP1\"      \"CHSY3\"      \"CKAP4\"      #>  [31] \"COPS8\"      \"COX6B2\"     \"CPNE9\"      \"CXCR3\"      \"DAPK3\"      #>  [36] \"DMTN\"       \"DOC2B\"      \"DYRK4\"      \"EFNB3\"      \"EHMT1\"      #>  [41] \"EXTL2\"      \"FAM20C\"     \"FAM53C\"     \"FASTKD2\"    \"FGD2\"       #>  [46] \"FIBCD1\"     \"FLI1\"       \"FLOT2\"      \"FLT3LG\"     \"FOXP3\"      #>  [51] \"FSTL1\"      \"FXYD2\"      \"GBP4\"       \"GCH1\"       \"GNA13\"      #>  [56] \"GNG8\"       \"GPRASP2\"    \"GRK2\"       \"GVINP1\"     \"GZF1\"       #>  [61] \"HS3ST4\"     \"HTRA3\"      \"IFI16\"      \"ILKAP\"      \"IQGAP1\"     #>  [66] \"ITGB5\"      \"JAM3\"       \"KCNE5\"      \"KEL\"        \"KIR2DL4\"    #>  [71] \"KIR2DS2\"    \"KITLG\"      \"KLRC2\"      \"LAMB1\"      \"LAMC1\"      #>  [76] \"LDLRAD3\"    \"LILRA6\"     \"LIMK1\"      \"LMAN2L\"     \"LOC153684\"  #>  [81] \"LSP1P5\"     \"LYZ\"        \"METTL7B\"    \"MRFAP1\"     \"MUC16\"      #>  [86] \"MYH10\"      \"NADK\"       \"NAP1L5\"     \"NCL\"        \"NLN\"        #>  [91] \"NLRC5\"      \"NPIPB5\"     \"NPR1\"       \"NUDT9\"      \"PALM2AKAP2\" #>  [96] \"PCGF2\"      \"PDE6D\"      \"PDHX\"       \"PGBD1\"      \"PHC1\"       #> [101] \"PHETA2\"     \"PLEKHM3\"    \"PMM1\"       \"POFUT1\"     \"POGLUT2\"    #> [106] \"PRF1\"       \"PRKD1\"      \"PSD4\"       \"PTK2B\"      \"PTX3\"       #> [111] \"PXDN\"       \"RAP2B\"      \"RASSF5\"     \"RASSF8\"     \"RCN1\"       #> [116] \"RESF1\"      \"RETREG2\"    \"RHOF\"       \"RNF24\"      \"RSPH6A\"     #> [121] \"SCFD2\"      \"SH3RF3\"     \"SLC15A1\"    \"SLC22A17\"   \"SLC37A3\"    #> [126] \"SLFN5\"      \"SMARCA1\"    \"SNCG\"       \"SNX20\"      \"SNX21\"      #> [131] \"SNX29P2\"    \"SORBS1\"     \"SPATS2L\"    \"SPI1\"       \"SPOCK1\"     #> [136] \"SPRY1\"      \"SRPRA\"      \"ST6GALNAC4\" \"ST7-AS1\"    \"ST8SIA2\"    #> [141] \"STAU1\"      \"STBD1\"      \"STK25\"      \"SV2A\"       \"SYNGR3\"     #> [146] \"SYNJ1\"      \"TBC1D20\"    \"TCEAL4\"     \"TCEAL9\"     \"THUMPD2\"    #> [151] \"TIGD7\"      \"TLR6\"       \"TLR8\"       \"TMC8\"       \"TMCO1-AS1\"  #> [156] \"TMEM128\"    \"TMEM259\"    \"TNFAIP8\"    \"TNN\"        \"TPST1\"      #> [161] \"TRAM1L1\"    \"TREML2\"     \"UBAC2\"      \"UBXN6\"      \"USP13\"      #> [166] \"USP40\"      \"VASP\"       \"VAT1\"       \"VPS26C\"     \"XKR6\"       #> [171] \"ZC3H12B\"    \"ZDHHC9\"     #>  #> $eschrich2009_rsi #>  [1] \"ABL1\"  \"AR\"    \"HDAC1\" \"IRF1\"  \"JUN\"   \"PAK2\"  \"PRKCB\" \"RELA\"  \"STAT1\" #> [10] \"SUMO1\" #>  #> $estimate_immune #>   [1] \"ADAM8\"    \"ADCY7\"    \"ALOX5AP\"  \"AOAH\"     \"ARHGAP15\" \"ARHGDIB\"  #>   [7] \"ARHGEF6\"  \"BCL2A1\"   \"BIN2\"     \"CASP1\"    \"CCDC69\"   \"CCL5\"     #>  [13] \"CCR7\"     \"CD2\"      \"CD247\"    \"CD27\"     \"CD300A\"   \"CD302\"    #>  [19] \"CD37\"     \"CD3D\"     \"CD48\"     \"CD52\"     \"CD53\"     \"CD69\"     #>  [25] \"CD74\"     \"CLEC2B\"   \"CLEC4A\"   \"CORO1A\"   \"CST7\"     \"CSTA\"     #>  [31] \"CTSS\"     \"CYBB\"     \"DOCK2\"    \"EMP3\"     \"EVI2B\"    \"FCER1G\"   #>  [37] \"FGL2\"     \"FGR\"      \"FLI1\"     \"FYB1\"     \"GBP1\"     \"GBP2\"     #>  [43] \"GIMAP4\"   \"GIMAP6\"   \"GLRX\"     \"GMFG\"     \"GMIP\"     \"GNLY\"     #>  [49] \"GPR65\"    \"GZMB\"     \"GZMH\"     \"GZMK\"     \"HCK\"      \"HCLS1\"    #>  [55] \"HLA-B\"    \"HLA-DMA\"  \"HLA-DPA1\" \"HLA-DPB1\" \"HLA-DRA\"  \"HLA-E\"    #>  [61] \"HLA-F\"    \"HLA-G\"    \"IFI30\"    \"IKZF1\"    \"IL10RA\"   \"IL18RAP\"  #>  [67] \"IL2RB\"    \"IL2RG\"    \"IL32\"     \"IL4R\"     \"IL7R\"     \"IRF8\"     #>  [73] \"ITGA4\"    \"ITGAL\"    \"ITGB2\"    \"ITK\"      \"KLRB1\"    \"KLRK1\"    #>  [79] \"LAIR1\"    \"LAPTM5\"   \"LCK\"      \"LCP2\"     \"LGALS9\"   \"LILRB1\"   #>  [85] \"LILRB2\"   \"LPXN\"     \"LSP1\"     \"LST1\"     \"LTB\"      \"LY96\"     #>  [91] \"LYZ\"      \"MAFB\"     \"MFSD1\"    \"MICAL1\"   \"MNDA\"     \"MSN\"      #>  [97] \"MYO1F\"    \"NCF2\"     \"NCF4\"     \"NCKAP1L\"  \"NFKBIA\"   \"NKG7\"     #> [103] \"P2RY14\"   \"PLEK\"     \"PRF1\"     \"PSTPIP1\"  \"PTGER2\"   \"PTGER4\"   #> [109] \"PTPRC\"    \"PTPRCAP\"  \"PTPRE\"    \"PVRIG\"    \"RAB27A\"   \"RABGAP1L\" #> [115] \"RAC2\"     \"RASSF2\"   \"RGS1\"     \"RHOG\"     \"RHOH\"     \"RNASE6\"   #> [121] \"S100A8\"   \"S100A9\"   \"SAMHD1\"   \"SELL\"     \"SELPLG\"   \"SH2B3\"    #> [127] \"SLA\"      \"SRGN\"     \"TAP1\"     \"TCIRG1\"   \"TGFB1\"    \"TNFAIP3\"  #> [133] \"TNFRSF1B\" \"TPP1\"     \"TPST2\"    \"TRAF3IP3\" \"TYROBP\"   \"VAV1\"     #> [139] \"VNN2\"     \"WIPF1\"    \"ZAP70\"    #>  #> $estimate_stromal #>   [1] \"ABCA6\"    \"ACTG2\"    \"ADAM12\"   \"ADAMTS5\"  \"ADGRA2\"   \"AIF1\"     #>   [7] \"AOC3\"     \"APBB1IP\"  \"ARHGAP28\" \"ASPN\"     \"ATP8B4\"   \"BGN\"      #>  [13] \"BTK\"      \"C1QA\"     \"C1QB\"     \"C3AR1\"    \"CCN4\"     \"CCR1\"     #>  [19] \"CD14\"     \"CD163\"    \"CD200\"    \"CD248\"    \"CD33\"     \"CD86\"     #>  [25] \"CD93\"     \"CDH5\"     \"CH25H\"    \"CILP\"     \"CLEC7A\"   \"COL10A1\"  #>  [31] \"COL14A1\"  \"COL15A1\"  \"COL1A2\"   \"COL3A1\"   \"COL5A3\"   \"COL6A3\"   #>  [37] \"COL8A2\"   \"COMP\"     \"COX7A1\"   \"CSF1R\"    \"CXCL12\"   \"CXCL14\"   #>  [43] \"CXCL9\"    \"DCN\"      \"DDR2\"     \"DIO2\"     \"ECM2\"     \"EDIL3\"    #>  [49] \"EDNRA\"    \"EGFL6\"    \"EMCN\"     \"ENPEP\"    \"ENPP2\"    \"ERG\"      #>  [55] \"F13A1\"    \"FAP\"      \"FASLG\"    \"FBLN2\"    \"FCGR2A\"   \"FCGR2B\"   #>  [61] \"FMO1\"     \"FOXF1\"    \"FPR1\"     \"FRZB\"     \"GIMAP5\"   \"GREM1\"    #>  [67] \"HDC\"      \"HEPH\"     \"HGF\"      \"IGF1\"     \"IGSF6\"    \"IL18R1\"   #>  [73] \"IL1B\"     \"ISLR\"     \"ITGAM\"    \"ITGBL1\"   \"ITIH3\"    \"ITIH5\"    #>  [79] \"ITM2A\"    \"KCNJ8\"    \"KDR\"      \"LDB2\"     \"LMOD1\"    \"LRRC15\"   #>  [85] \"LRRC32\"   \"LUM\"      \"LY86\"     \"MAF\"      \"MFAP5\"    \"MMP3\"     #>  [91] \"MS4A4A\"   \"MS4A6A\"   \"MSR1\"     \"MXRA5\"    \"NME8\"     \"NOX4\"     #>  [97] \"OLFML1\"   \"OLFML2B\"  \"PAPPA\"    \"PCDH12\"   \"PDE2A\"    \"PDGFRB\"   #> [103] \"PIK3R5\"   \"PLPPR4\"   \"PLXDC1\"   \"PLXNC1\"   \"PRKG1\"    \"PTGER3\"   #> [109] \"PTGIS\"    \"RAMP3\"    \"RARRES2\"  \"RASGRP3\"  \"RGS4\"     \"RSAD2\"    #> [115] \"RUNX1T1\"  \"SAMSN1\"   \"SCUBE2\"   \"SERPING1\" \"SFRP4\"    \"SGCD\"     #> [121] \"SH2D1A\"   \"SIGLEC1\"  \"SP140\"    \"SPON1\"    \"SPON2\"    \"SULF1\"    #> [127] \"TCF21\"    \"TENM4\"    \"TFEC\"     \"THBS2\"    \"TLR2\"     \"TLR7\"     #> [133] \"TNFSF4\"   \"TNN\"      \"TRAT1\"    \"VCAM1\"    \"VSIG4\"    \"WNT2\"     #> [139] \"ZEB2\"     \"ZFPM2\"    \"ZNF423\"   #>  #> $eustace2013_hypoxia #>  [1] \"ALDOA\"   \"ANGPTL4\" \"ANLN\"    \"BNC1\"    \"CA9\"     \"CDKN3\"   \"COL4A6\"  #>  [8] \"DCBLD1\"  \"ENO1\"    \"FAM83B\"  \"FOSL1\"   \"GNAI1\"   \"HILPDA\"  \"KCTD11\"  #> [15] \"KRT17\"   \"LDHA\"    \"MRGBP\"   \"MRPS17\"  \"P4HA1\"   \"PGAM1\"   \"PGK1\"    #> [22] \"SDC1\"    \"SLC16A1\" \"SLC2A1\"  \"TPI1\"    \"VEGFA\"   #>  #> $fan2021_ferroptosis #>  [1] \"ASNS\"      \"ATG5\"      \"AURKA\"     \"BAP1\"      \"BNIP3\"     \"CISD2\"     #>  [7] \"DRD4\"      \"FBXW7\"     \"FTH1\"      \"LINC00336\" \"MAP1LC3A\"  \"MAP3K5\"    #> [13] \"PRDX6\"     \"SLC2A3\"    \"SLC7A5\"    \"SOCS1\"     \"ZFP69B\"    #>  #> $fang2021_irgs #>  [1] \"ADM\"       \"BTC\"       \"CTLA4\"     \"DEFB1\"     \"DKK1\"      \"EDNRB\"     #>  [7] \"FAM3D\"     \"GNRH1\"     \"STC2\"      \"TNFRSF12A\" #>  #> $han2021_ferroptosis #> [1] \"FTH1\"  \"PHKG2\" \"TFRC\"  #>  #> $he2021_ferroptosis_a #> [1] \"CDKN2A\"  \"EIF2S1\"  \"FTH1\"    \"KEAP1\"   \"MAP3K5\"  \"SELENOS\" \"SLC2A3\"  #>  #> $he2021_ferroptosis_b #>  [1] \"ACSL3\"    \"ATG5\"     \"DDIT4\"    \"MAP1LC3A\" \"MAP3K5\"   \"OTUB1\"    #>  [7] \"PRDX6\"    \"PRKAA2\"   \"SLC7A5\"   \"SOCS1\"    #>  #> $hu2021_derbp #> [1] \"AZGP1\"   \"EZH2\"    \"IGF2BP2\" \"MKRN3\"   \"MRPL47\"  \"NCBP2\"   #>  #> $huang2022_ferroptosis #> [1] \"ATG5\"   \"CDKN2A\" \"MAP3K5\" \"OTUB1\"  \"SLC2A3\" \"SOCS1\"  \"TRIB3\"  #>  #> $ips_cp #>  [1] \"CD27\"     \"CD274\"    \"CTLA4\"    \"HAVCR2\"   \"ICOS\"     \"IDO1\"     #>  [7] \"LAG3\"     \"PDCD1\"    \"PDCD1LG2\" \"TIGIT\"    #>  #> $ips_ec #>   [1] \"ACAP1\"     \"ADRM1\"     \"AHSA1\"     \"AIM2\"      \"APOL3\"     \"ARHGAP10\"  #>   [7] \"ATM\"       \"ATP10D\"    \"BIRC3\"     \"BRIP1\"     \"C1GALT1C1\" \"C3AR1\"     #>  [13] \"CASP3\"     \"CASQ1\"     \"CAVIN2\"    \"CCL20\"     \"CCL4\"      \"CCL5\"      #>  [19] \"CCNB1\"     \"CCR5\"      \"CCR7\"      \"CCT6B\"     \"CD160\"     \"CD300E\"    #>  [25] \"CD37\"      \"CD3D\"      \"CD3E\"      \"CD3G\"      \"CD55\"      \"CD69\"      #>  [31] \"CD8A\"      \"CETN3\"     \"CFLAR\"     \"CMKLR1\"    \"CSE1L\"     \"DAPP1\"     #>  [37] \"DARS1\"     \"DOCK9\"     \"DUSP2\"     \"ESCO2\"     \"ETS1\"      \"EXO1\"      #>  [43] \"EXOC6\"     \"EXOSC9\"    \"EZH2\"      \"FCRL6\"     \"FLT3LG\"    \"GDE1\"      #>  [49] \"GEMIN6\"    \"GNLY\"      \"GPT2\"      \"GZMA\"      \"GZMH\"      \"GZMK\"      #>  [55] \"GZMM\"      \"HAPLN3\"    \"HLA-DMB\"   \"HLA-DPA1\"  \"HLA-DPB1\"  \"IARS1\"     #>  [61] \"IFI16\"     \"IL2RB\"     \"IL34\"      \"KIF11\"     \"KNTC1\"     \"LCK\"       #>  [67] \"LIME1\"     \"LTK\"       \"MPZL1\"     \"NCOA4\"     \"NEFL\"      \"NFKBIA\"    #>  [73] \"NKG7\"      \"NUF2\"      \"PDGFRL\"    \"PIK3IP1\"   \"PRC1\"      \"PSAT1\"     #>  [79] \"PTGS1\"     \"PTRH2\"     \"REPS1\"     \"RGS1\"      \"RTKN2\"     \"SAMSN1\"    #>  [85] \"SCG2\"      \"SELL\"      \"SETD7\"     \"SIGLEC14\"  \"SIGLEC6\"   \"SIK1\"      #>  [91] \"TAL1\"      \"TFEC\"      \"TIMM13\"    \"TIPIN\"     \"TPK1\"      \"TRAT1\"     #>  [97] \"TRIB2\"     \"UQCRB\"     \"USP9Y\"     \"WIPF1\"     \"ZAP70\"     \"ZCRB1\"     #>  #> $ips_mhc #>  [1] \"B2M\"      \"HLA-A\"    \"HLA-B\"    \"HLA-C\"    \"HLA-DPA1\" \"HLA-DPB1\" #>  [7] \"HLA-E\"    \"HLA-F\"    \"TAP1\"     \"TAP2\"     #>  #> $ips_sc #>  [1] \"CCL3L1\"  \"CCR2\"    \"CD14\"    \"CD2\"     \"CD72\"    \"CD86\"    \"CLEC5A\"  #>  [8] \"CXCR4\"   \"FCGR2A\"  \"FCGR2B\"  \"FCGR3A\"  \"FERMT3\"  \"FOXP3\"   \"GPSM3\"   #> [15] \"IL18BP\"  \"IL4R\"    \"ITGA4\"   \"ITGAL\"   \"ITGAM\"   \"L1CAM\"   \"LIPA\"    #> [22] \"LRP1\"    \"LRRC42\"  \"MARCO\"   \"MMP12\"   \"MNDA\"    \"MRC1\"    \"MS4A6A\"  #> [29] \"PARVG\"   \"PELO\"    \"PLEK\"    \"PRSS23\"  \"PSAP\"    \"PTGER2\"  \"PTGES2\"  #> [36] \"PTGIR\"   \"S100A8\"  \"S100A9\"  \"ST8SIA4\" \"STAB1\"   #>  #> $li2021_ferroptosis_a #>  [1] \"ACO1\"     \"AKR1C3\"   \"ALOX15\"   \"ATG5\"     \"BID\"      \"GLS2\"     #>  [7] \"GOT1\"     \"MAP1LC3A\" \"MAP3K5\"   \"SCO2\"     #>  #> $li2021_ferroptosis_b #>  [1] \"ASNS\"   \"AURKA\"  \"CAV1\"   \"CDKN2A\" \"CISD2\"  \"DDIT4\"  \"EGFR\"   \"G6PD\"   #>  [9] \"PRKAA2\" \"SLC7A5\" \"SOCS1\"  \"TRIB3\"  #>  #> $li2021_ferroptosis_c #> [1] \"AKR1C3\"  \"AURKA\"   \"CAV1\"    \"SLC7A11\" \"TRIB3\"   #>  #> $li2021_ferroptosis_d #> [1] \"FLT3\"  \"IL6\"   \"KEAP1\" \"NQO1\"  \"SOCS1\" \"TRIB3\" #>  #> $li2021_irgs #> [1] \"BMP7\"  \"PLAUR\" \"PRKCQ\" \"PSMD2\" #>  #> $liu2020_immune #> [1] \"DKK1\"      \"HBEGF\"     \"INHBA\"     \"PIK3R3\"    \"RNASE7\"    \"TNFRSF12A\" #>  #> $liu2021_mgs #> [1] \"CCL13\" \"CCR7\"  \"CD276\" \"IL1B\"  \"LYVE1\" \"VEGFC\" #>  #> $lohavanichbutr2013_hpvneg #>  [1] \"CLEC3B\"   \"LAMC2\"    \"LIPI\"     \"MYH11\"    \"NREP\"     \"OASL\"     #>  [7] \"OSMR\"     \"PLEKHA7\"  \"SERPINE1\" \"SLC16A1\"  \"THBS1\"    \"TPPP\"     #> [13] \"ZDHHC11\"  #>  #> $lu2020_npc #> [1] \"IGF2BP1\" \"IGF2BP2\" \"METTL3\"  #>  #> $lu2021_ferroptosis #> [1] \"BNIP3\"  \"FTH1\"   \"SLC2A3\" \"TRIB3\"  #>  #> $muro2016_ifng #> [1] \"CXCL10\"  \"CXCL9\"   \"HLA-DRA\" \"IDO1\"    \"IFNG\"    \"STAT1\"   #>  #> $qiang2021_irgs #>  [1] \"BLNK\"      \"CCL26\"     \"FPR2\"      \"GAST\"      \"IL34\"      \"IRF9\"      #>  [7] \"PLAU\"      \"SEMA3G\"    \"SLURP1\"    \"STC1\"      \"STC2\"      \"TNFRSF12A\" #> [13] \"TNFRSF25\"  #>  #> $rooney2015_cyt #> [1] \"GZMA\" \"PRF1\" #>  #> $shan2021_ferroptosis #>  [1] \"AKR1C2\"  \"CD44\"    \"CDO1\"    \"CYBB\"    \"DUOX2\"   \"EGFR\"    \"EPAS1\"   #>  [8] \"FTH1\"    \"MYB\"     \"NOX1\"    \"NOX3\"    \"PROM2\"   \"SLC7A11\" \"SQSTM1\"  #> [15] \"TP63\"    #>  #> $she2020_irgs #>  [1] \"AVPR2\"    \"BTC\"      \"CCL22\"    \"CCR6\"     \"CHGB\"     \"DKK1\"     #>  [7] \"HBEGF\"    \"HRG\"      \"ICOS\"     \"IL20RA\"   \"INHBB\"    \"KLRK1\"    #> [13] \"LCNL1\"    \"MASP1\"    \"OLR1\"     \"PDGFA\"    \"PTX3\"     \"RBP4\"     #> [19] \"RFXAP\"    \"ROBO1\"    \"RORB\"     \"SH3BP2\"   \"TMSB4Y\"   \"TNFRSF18\" #> [25] \"TNFRSF25\" \"TNFRSF4\"  \"ULBP1\"    #>  #> $si2022_npc #> [1] \"FOXO6\"    \"LZTS2\"    \"MAPK8IP2\" \"SCUBE3\"   #>  #> $tang2018_npc #>  [1] \"ANXA1\"  \"CBR3\"   \"CLASP1\" \"CXCL10\" \"DCTN1\"  \"FNDC3B\" \"GRM4\"   \"HDLBP\"  #>  [9] \"LRIG1\"  \"POLR2M\" \"WNK1\"   \"WSB2\"   \"YBX3\"   #>  #> $wu2020_metabolic #>  [1] \"ACAA1\"    \"ACAT1\"    \"ACOX3\"    \"ADA\"      \"ADH7\"     \"ADK\"      #>  [7] \"AGPS\"     \"ASNS\"     \"ATIC\"     \"DGKQ\"     \"DNMT1\"    \"ENTPD1\"   #> [13] \"GNPDA1\"   \"HADHB\"    \"HEXB\"     \"HPRT1\"    \"KYNU\"     \"LCLAT1\"   #> [19] \"MTHFD2\"   \"NADSYN1\"  \"PAFAH1B2\" \"PIP4K2A\"  \"PLA2G2D\"  \"PLCB3\"    #> [25] \"POLD2\"    \"POLE2\"    \"PRPS1\"    \"PYGL\"     \"RDH11\"    \"SMS\"      #>  #> $xu2021_ferroptosis #> [1] \"ATG5\"   \"FTH1\"   \"MAP3K5\" \"OTUB1\"  \"PRDX6\"  \"SOCS1\"  #>  #> $zhu2021_ferroptosis #> [1] \"CA9\"     \"NRAS\"    \"TNFAIP3\" #>  #> $zou2020_npc #> [1] \"ACKR1\"  \"IGHG1\"  \"IL33\"   \"SLC6A8\" #>  get_sig_genes(\"estimate\") #> $estimate_immune #>   [1] \"ADAM8\"    \"ADCY7\"    \"ALOX5AP\"  \"AOAH\"     \"ARHGAP15\" \"ARHGDIB\"  #>   [7] \"ARHGEF6\"  \"BCL2A1\"   \"BIN2\"     \"CASP1\"    \"CCDC69\"   \"CCL5\"     #>  [13] \"CCR7\"     \"CD2\"      \"CD247\"    \"CD27\"     \"CD300A\"   \"CD302\"    #>  [19] \"CD37\"     \"CD3D\"     \"CD48\"     \"CD52\"     \"CD53\"     \"CD69\"     #>  [25] \"CD74\"     \"CLEC2B\"   \"CLEC4A\"   \"CORO1A\"   \"CST7\"     \"CSTA\"     #>  [31] \"CTSS\"     \"CYBB\"     \"DOCK2\"    \"EMP3\"     \"EVI2B\"    \"FCER1G\"   #>  [37] \"FGL2\"     \"FGR\"      \"FLI1\"     \"FYB1\"     \"GBP1\"     \"GBP2\"     #>  [43] \"GIMAP4\"   \"GIMAP6\"   \"GLRX\"     \"GMFG\"     \"GMIP\"     \"GNLY\"     #>  [49] \"GPR65\"    \"GZMB\"     \"GZMH\"     \"GZMK\"     \"HCK\"      \"HCLS1\"    #>  [55] \"HLA-B\"    \"HLA-DMA\"  \"HLA-DPA1\" \"HLA-DPB1\" \"HLA-DRA\"  \"HLA-E\"    #>  [61] \"HLA-F\"    \"HLA-G\"    \"IFI30\"    \"IKZF1\"    \"IL10RA\"   \"IL18RAP\"  #>  [67] \"IL2RB\"    \"IL2RG\"    \"IL32\"     \"IL4R\"     \"IL7R\"     \"IRF8\"     #>  [73] \"ITGA4\"    \"ITGAL\"    \"ITGB2\"    \"ITK\"      \"KLRB1\"    \"KLRK1\"    #>  [79] \"LAIR1\"    \"LAPTM5\"   \"LCK\"      \"LCP2\"     \"LGALS9\"   \"LILRB1\"   #>  [85] \"LILRB2\"   \"LPXN\"     \"LSP1\"     \"LST1\"     \"LTB\"      \"LY96\"     #>  [91] \"LYZ\"      \"MAFB\"     \"MFSD1\"    \"MICAL1\"   \"MNDA\"     \"MSN\"      #>  [97] \"MYO1F\"    \"NCF2\"     \"NCF4\"     \"NCKAP1L\"  \"NFKBIA\"   \"NKG7\"     #> [103] \"P2RY14\"   \"PLEK\"     \"PRF1\"     \"PSTPIP1\"  \"PTGER2\"   \"PTGER4\"   #> [109] \"PTPRC\"    \"PTPRCAP\"  \"PTPRE\"    \"PVRIG\"    \"RAB27A\"   \"RABGAP1L\" #> [115] \"RAC2\"     \"RASSF2\"   \"RGS1\"     \"RHOG\"     \"RHOH\"     \"RNASE6\"   #> [121] \"S100A8\"   \"S100A9\"   \"SAMHD1\"   \"SELL\"     \"SELPLG\"   \"SH2B3\"    #> [127] \"SLA\"      \"SRGN\"     \"TAP1\"     \"TCIRG1\"   \"TGFB1\"    \"TNFAIP3\"  #> [133] \"TNFRSF1B\" \"TPP1\"     \"TPST2\"    \"TRAF3IP3\" \"TYROBP\"   \"VAV1\"     #> [139] \"VNN2\"     \"WIPF1\"    \"ZAP70\"    #>  #> $estimate_stromal #>   [1] \"ABCA6\"    \"ACTG2\"    \"ADAM12\"   \"ADAMTS5\"  \"ADGRA2\"   \"AIF1\"     #>   [7] \"AOC3\"     \"APBB1IP\"  \"ARHGAP28\" \"ASPN\"     \"ATP8B4\"   \"BGN\"      #>  [13] \"BTK\"      \"C1QA\"     \"C1QB\"     \"C3AR1\"    \"CCN4\"     \"CCR1\"     #>  [19] \"CD14\"     \"CD163\"    \"CD200\"    \"CD248\"    \"CD33\"     \"CD86\"     #>  [25] \"CD93\"     \"CDH5\"     \"CH25H\"    \"CILP\"     \"CLEC7A\"   \"COL10A1\"  #>  [31] \"COL14A1\"  \"COL15A1\"  \"COL1A2\"   \"COL3A1\"   \"COL5A3\"   \"COL6A3\"   #>  [37] \"COL8A2\"   \"COMP\"     \"COX7A1\"   \"CSF1R\"    \"CXCL12\"   \"CXCL14\"   #>  [43] \"CXCL9\"    \"DCN\"      \"DDR2\"     \"DIO2\"     \"ECM2\"     \"EDIL3\"    #>  [49] \"EDNRA\"    \"EGFL6\"    \"EMCN\"     \"ENPEP\"    \"ENPP2\"    \"ERG\"      #>  [55] \"F13A1\"    \"FAP\"      \"FASLG\"    \"FBLN2\"    \"FCGR2A\"   \"FCGR2B\"   #>  [61] \"FMO1\"     \"FOXF1\"    \"FPR1\"     \"FRZB\"     \"GIMAP5\"   \"GREM1\"    #>  [67] \"HDC\"      \"HEPH\"     \"HGF\"      \"IGF1\"     \"IGSF6\"    \"IL18R1\"   #>  [73] \"IL1B\"     \"ISLR\"     \"ITGAM\"    \"ITGBL1\"   \"ITIH3\"    \"ITIH5\"    #>  [79] \"ITM2A\"    \"KCNJ8\"    \"KDR\"      \"LDB2\"     \"LMOD1\"    \"LRRC15\"   #>  [85] \"LRRC32\"   \"LUM\"      \"LY86\"     \"MAF\"      \"MFAP5\"    \"MMP3\"     #>  [91] \"MS4A4A\"   \"MS4A6A\"   \"MSR1\"     \"MXRA5\"    \"NME8\"     \"NOX4\"     #>  [97] \"OLFML1\"   \"OLFML2B\"  \"PAPPA\"    \"PCDH12\"   \"PDE2A\"    \"PDGFRB\"   #> [103] \"PIK3R5\"   \"PLPPR4\"   \"PLXDC1\"   \"PLXNC1\"   \"PRKG1\"    \"PTGER3\"   #> [109] \"PTGIS\"    \"RAMP3\"    \"RARRES2\"  \"RASGRP3\"  \"RGS4\"     \"RSAD2\"    #> [115] \"RUNX1T1\"  \"SAMSN1\"   \"SCUBE2\"   \"SERPING1\" \"SFRP4\"    \"SGCD\"     #> [121] \"SH2D1A\"   \"SIGLEC1\"  \"SP140\"    \"SPON1\"    \"SPON2\"    \"SULF1\"    #> [127] \"TCF21\"    \"TENM4\"    \"TFEC\"     \"THBS2\"    \"TLR2\"     \"TLR7\"     #> [133] \"TNFSF4\"   \"TNN\"      \"TRAT1\"    \"VCAM1\"    \"VSIG4\"    \"WNT2\"     #> [139] \"ZEB2\"     \"ZFPM2\"    \"ZNF423\"   #>"},{"path":"https://acare.github.io/hacksig/reference/get_sig_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Display available gene signatures — get_sig_info","title":"Display available gene signatures — get_sig_info","text":"get_sig_info() returns information gene signatures implemented hacksig.","code":""},{"path":"https://acare.github.io/hacksig/reference/get_sig_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display available gene signatures — get_sig_info","text":"","code":"get_sig_info()"},{"path":"https://acare.github.io/hacksig/reference/get_sig_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display available gene signatures — get_sig_info","text":"tibble one row per signature four columns: signature_id, unique identifier associated signature; signature_keywords, valid keywords use signatures argument hack_sig() check_sig() well keywords argument get_sig_genes(); publication_doi, original publication DOI; description, brief description signature.","code":""},{"path":[]},{"path":"https://acare.github.io/hacksig/reference/get_sig_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display available gene signatures — get_sig_info","text":"","code":"get_sig_info() #> # A tibble: 40 × 4 #>    signature_id        signature_keywords            publication_doi description #>    <chr>               <chr>                         <chr>           <chr>       #>  1 ayers2017_immexp    ayers2017_immexp|immune expa… 10.1172/JCI911… Immune exp… #>  2 bai2019_immune      bai2019_immune|head and neck… 10.1155/2019/3… Immune/inf… #>  3 cinsarc             cinsarc|metastasis|sarcoma|s… 10.1038/nm.2174 Biomarker … #>  4 dececco2014_int172  dececco2014_int172|head and … 10.1093/annonc… Signature … #>  5 eschrich2009_rsi    eschrich2009_rsi|radioresist… 10.1016/j.ijro… Genes aime… #>  6 estimate_immune     estimate|immune               10.1038/ncomms… Immune-rel… #>  7 estimate_stromal    estimate|stromal              10.1038/ncomms… Stroma-rel… #>  8 eustace2013_hypoxia eustace2013_hypoxia|head and… 10.1158/1078-0… Hypoxia-re… #>  9 fan2021_ferroptosis ferroptosis|head and neck sq… 10.3389/fgene.… A model of… #> 10 fang2021_irgs       fang2021_irgs|immune          10.18632/aging… Immune-rel… #> # ℹ 30 more rows"},{"path":"https://acare.github.io/hacksig/reference/hack_cinsarc.html","id":null,"dir":"Reference","previous_headings":"","what":"Hack the CINSARC classification — hack_cinsarc","title":"Hack the CINSARC classification — hack_cinsarc","text":"Given gene expression matrix 0-1 vector indicating distant metastasis status samples, hack_cinsarc() classifies samples one two risk classes, C1 C2, using CINSARC signature implemented Chibon et al., 2010.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_cinsarc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hack the CINSARC classification — hack_cinsarc","text":"","code":"hack_cinsarc(expr_data, dm_status)"},{"path":"https://acare.github.io/hacksig/reference/hack_cinsarc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hack the CINSARC classification — hack_cinsarc","text":"codeocean.com/capsule/4933686/tree/v4","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_cinsarc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hack the CINSARC classification — hack_cinsarc","text":"expr_data normalized gene expression matrix (data frame) gene symbols row names samples columns. dm_status numeric vector specifying whether sample either (1) (0) developed distant metastasis.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_cinsarc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hack the CINSARC classification — hack_cinsarc","text":"tibble one row sample expr_data two columns: sample_id cinsarc_class.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_cinsarc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hack the CINSARC classification — hack_cinsarc","text":"CINSARC (Complexity INdex SARComas) prognostic 67-gene signature related mitosis control chromosome integrity. developed improve metastatic outcome prediction soft tissue sarcomas FNCLCC (Fédération Francaise des Centres de Lutte Contre le Cancer) grading system.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_cinsarc.html","id":"algorithm","dir":"Reference","previous_headings":"","what":"Algorithm","title":"Hack the CINSARC classification — hack_cinsarc","text":"CINSARC method implemented hacksig makes use leave-one-cross validation (LOOCV) classify samples C1/C2 risk groups (see Lesluyes & Chibon, 2020). First, gene expression values centered mean across samples. , iteration LOOCV, mean normalized gene values computed metastasis group (.e. compute metastatic centroids). , one minus Spearman's correlation centered samples metastatic centroids computed. Finally, sample correlated non-metastatic centroid, assigned C1 class (low risk). Conversely, sample correlated metastatic centroid, assigned C2 class (high risk).","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_cinsarc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hack the CINSARC classification — hack_cinsarc","text":"Chibon, F., Lagarde, P., Salas, S., Pérot, G., Brouste, V., Tirode, F., Lucchesi, C., de Reynies, ., Kauffmann, ., Bui, B., Terrier, P., Bonvalot, S., Le Cesne, ., Vince-Ranchère, D., Blay, J. Y., Collin, F., Guillou, L., Leroux, ., Coindre, J. M., & Aurias, . (2010). Validated prediction clinical outcome sarcomas multiple types cancer basis gene expression signature related genome complexity. Nature medicine, 16(7), 781–787. doi:10.1038/nm.2174 . Lesluyes, T., & Chibon, F. (2020). Global Integrated Analysis CINSARC-Associated Genetic Defects. Cancer research, 80(23), 5282–5290. doi:10.1158/0008-5472.CAN-20-0512 .","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_cinsarc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hack the CINSARC classification — hack_cinsarc","text":"","code":"# generate random distant metastasis outcome set.seed(123) test_dm_status <- sample(c(0, 1), size = ncol(test_expr), replace = TRUE)  hack_cinsarc(test_expr, test_dm_status) #> # A tibble: 20 × 2 #>    sample_id cinsarc_class #>    <chr>     <chr>         #>  1 sample1   C2            #>  2 sample2   C1            #>  3 sample3   C2            #>  4 sample4   C1            #>  5 sample5   C2            #>  6 sample6   C1            #>  7 sample7   C1            #>  8 sample8   C1            #>  9 sample9   C1            #> 10 sample10  C2            #> 11 sample11  C1            #> 12 sample12  C1            #> 13 sample13  C1            #> 14 sample14  C2            #> 15 sample15  C1            #> 16 sample16  C2            #> 17 sample17  C1            #> 18 sample18  C2            #> 19 sample19  C1            #> 20 sample20  C2"},{"path":"https://acare.github.io/hacksig/reference/hack_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Hack the ESTIMATE scores — hack_estimate","title":"Hack the ESTIMATE scores — hack_estimate","text":"Obtain Immune, Stroma, ESTIMATE Tumor Purity scores cohort samples, using method implemented Yoshihara et al., 2013.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hack the ESTIMATE scores — hack_estimate","text":"","code":"hack_estimate(expr_data)"},{"path":"https://acare.github.io/hacksig/reference/hack_estimate.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hack the ESTIMATE scores — hack_estimate","text":"bioinformatics.mdanderson.org/public-software/estimate/","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hack the ESTIMATE scores — hack_estimate","text":"expr_data normalized gene expression matrix (data frame) gene symbols row names samples columns.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hack the ESTIMATE scores — hack_estimate","text":"tibble one row sample expr_data five columns: sample_id, immune_score, stroma_score, estimate_score purity_score.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_estimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hack the ESTIMATE scores — hack_estimate","text":"ESTIMATE (Estimation STromal Immune cells MAlignant Tumors using Expression data) method developed aim estimate fraction tumor cells sample using gene expression instead copy number data. fundamental assumption method tumor microenvironment rich dynamic ecosystem, immune infiltrating cells stroma play major role. ESTIMATE score defined combination (.e. sum) immune stroma scores can thought \"non-tumor score\". Consequently, high ESTIMATE enrichment gives low tumor purity score viceversa.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_estimate.html","id":"algorithm","dir":"Reference","previous_headings":"","what":"Algorithm","title":"Hack the ESTIMATE scores — hack_estimate","text":"Raw immune stromal signatures scores computed using single sample GSEA rank normalization (Barbie et al., 2009). , ESTIMATE score computed summing immune stroma scores. Finally, tumor purity score obtained following formula: $$Purity = cos(0.6049872018 + 0.0001467884 * ESTIMATE)$$","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_estimate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hack the ESTIMATE scores — hack_estimate","text":"Barbie, D. ., Tamayo, P., Boehm, J. S., Kim, S. Y., Moody, S. E., Dunn, . F., Schinzel, . C., Sandy, P., Meylan, E., Scholl, C., Fröhling, S., Chan, E. M., Sos, M. L., Michel, K., Mermel, C., Silver, S. J., Weir, B. ., Reiling, J. H., Sheng, Q., Gupta, P. B., … Hahn, W. C. (2009). Systematic RNA interference reveals oncogenic KRAS-driven cancers require TBK1. Nature, 462(7269), 108–112. doi:10.1038/nature08460 . Yoshihara, K., Shahmoradgoli, M., Martínez, E., Vegesna, R., Kim, H., Torres-Garcia, W., Treviño, V., Shen, H., Laird, P. W., Levine, D. ., Carter, S. L., Getz, G., Stemke-Hale, K., Mills, G. B., & Verhaak, R. G. (2013). Inferring tumour purity stromal immune cell admixture expression data. Nature communications, 4, 2612. doi:10.1038/ncomms3612 .","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hack the ESTIMATE scores — hack_estimate","text":"","code":"hack_estimate(test_expr) #> # A tibble: 20 × 5 #>    sample_id immune_score stroma_score estimate_score purity_score #>    <chr>            <dbl>        <dbl>          <dbl>        <dbl> #>  1 sample1          -636.         778.           142.        0.811 #>  2 sample10         1590.        1297.          2887.        0.516 #>  3 sample11         2040.         512.          2552.        0.557 #>  4 sample12         1835.         772.          2607.        0.551 #>  5 sample13          632.         778.          1409.        0.688 #>  6 sample14         1185.        1005.          2191.        0.601 #>  7 sample15         2393.         415.          2808.        0.526 #>  8 sample16         1308.        1274.          2582.        0.554 #>  9 sample17         1181.         677.          1858.        0.639 #> 10 sample18          851.        1517.          2368.        0.580 #> 11 sample19         1672.         980.          2652.        0.545 #> 12 sample2          2118.         703.          2821.        0.524 #> 13 sample20         1639.        2482.          4121.        0.353 #> 14 sample3           725.         805.          1530.        0.675 #> 15 sample4           737.        2031.          2768.        0.531 #> 16 sample5           181.        1129.          1310.        0.699 #> 17 sample6          1221.        1175.          2395.        0.576 #> 18 sample7          1322.         375.          1697.        0.657 #> 19 sample8           515.        1158.          1673.        0.660 #> 20 sample9           297.        1147.          1443.        0.685"},{"path":"https://acare.github.io/hacksig/reference/hack_immunophenoscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Hack the Immunophenoscore — hack_immunophenoscore","title":"Hack the Immunophenoscore — hack_immunophenoscore","text":"Obtain various immune biomarkers scores, combined together give immunophenoscore (Charoentong et al., 2017).","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_immunophenoscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hack the Immunophenoscore — hack_immunophenoscore","text":"","code":"hack_immunophenoscore(expr_data, extract = \"ips\")"},{"path":"https://acare.github.io/hacksig/reference/hack_immunophenoscore.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hack the Immunophenoscore — hack_immunophenoscore","text":"github.com/icbi-lab/Immunophenogram","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_immunophenoscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hack the Immunophenoscore — hack_immunophenoscore","text":"expr_data normalized gene expression matrix (data frame) gene symbols row names samples columns. extract string controlling type biomarker scores want obtain. Possible choices : \"ips\" (default), raw discrete IPS scores; \"class\", IPS scores together four summary class scores; \"\", possible biomarker scores.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_immunophenoscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hack the Immunophenoscore — hack_immunophenoscore","text":"tibble one row sample expr_data, column sample_id indicating sample identifiers number additional columns depending choice extract.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_immunophenoscore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hack the Immunophenoscore — hack_immunophenoscore","text":"immunophenoscore conceived quantification tumor immunogenicity. obtained aggregating multiple immune biomarkers scores, grouped four major classes: MHC molecules (MHC), expression MHC class , class II, non-classical molecules; Immunomodulators (CP), expression certain co-inhibitory co-stimulatory molecules; Effector cells (EC), infiltration activated CD8+/CD4+ T cells Tem (effector memory) CD8+/CD4+ cells; Suppressor cells (SC), infiltration immunosuppressive cells (Tregs MDSCs). table shows detail 26 immune biomarkers cell types grouped class together number genes represent :","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_immunophenoscore.html","id":"algorithm","dir":"Reference","previous_headings":"","what":"Algorithm","title":"Hack the Immunophenoscore — hack_immunophenoscore","text":"Samplewise gene expression z-scores obtained 26 immune cell types biomarkers. , weighted averaged z-scores computed class raw immunophenoscore (\\(IPS_{raw}\\)) results sum four class scores. Finally, immunophenoscore (\\(IPS\\)) given integer value 0 10 following way: \\(IPS = 0\\), \\(IPS_{raw} \\le 0\\); \\(IPS = [10 * (IPS_{raw} / 3)]\\), \\(0 < IPS_{raw} < 3\\); \\(IPS = 10\\), \\(IPS_{raw} \\ge 3\\).","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_immunophenoscore.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hack the Immunophenoscore — hack_immunophenoscore","text":"Charoentong, P., Finotello, F., Angelova, M., Mayer, C., Efremova, M., Rieder, D., Hackl, H., & Trajanoski, Z. (2017). Pan-cancer Immunogenomic Analyses Reveal Genotype-Immunophenotype Relationships Predictors Response Checkpoint Blockade. Cell reports, 18(1), 248–262. doi:10.1016/j.celrep.2016.12.019 .","code":""},{"path":[]},{"path":"https://acare.github.io/hacksig/reference/hack_immunophenoscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hack the Immunophenoscore — hack_immunophenoscore","text":"","code":"hack_immunophenoscore(test_expr) #> # A tibble: 20 × 3 #>    sample_id raw_score ips_score #>    <fct>         <dbl>     <dbl> #>  1 sample1      0.942          3 #>  2 sample2     -0.348          0 #>  3 sample3      0.0939         0 #>  4 sample4     -0.335          0 #>  5 sample5      1.64           5 #>  6 sample6      1.73           6 #>  7 sample7     -0.153          0 #>  8 sample8      0.468          2 #>  9 sample9     -0.236          0 #> 10 sample10    -2.31           0 #> 11 sample11     0.114          0 #> 12 sample12     1.46           5 #> 13 sample13    -0.866          0 #> 14 sample14     0.909          3 #> 15 sample15     0.647          2 #> 16 sample16     0.749          2 #> 17 sample17     0.344          1 #> 18 sample18    -0.322          0 #> 19 sample19    -1.10           0 #> 20 sample20     0.809          3 hack_immunophenoscore(test_expr, extract = \"class\") #> # A tibble: 20 × 7 #>    sample_id raw_score ips_score cp_score  ec_score mhc_score sc_score #>    <fct>         <dbl>     <dbl>    <dbl>     <dbl>     <dbl>    <dbl> #>  1 sample1      0.942          3   0.126  -0.148       0.312   0.652   #>  2 sample2     -0.348          0   0.407   0.0679     -0.796  -0.0268  #>  3 sample3      0.0939         0   0.627   0.0347     -0.483  -0.0843  #>  4 sample4     -0.335          0  -0.0161  0.292      -0.777   0.166   #>  5 sample5      1.64           5   0.778   0.0607      0.876  -0.0742  #>  6 sample6      1.73           6   0.415   0.191       1.26   -0.136   #>  7 sample7     -0.153          0  -0.0862 -0.0140     -0.0677  0.0153  #>  8 sample8      0.468          2   0.355   0.0814     -0.508   0.539   #>  9 sample9     -0.236          0  -0.0908  0.0357     -0.481   0.300   #> 10 sample10    -2.31           0   0.198  -0.258      -2.12   -0.129   #> 11 sample11     0.114          0  -0.338   0.0755      0.552  -0.176   #> 12 sample12     1.46           5   0.360   0.105       0.904   0.0910  #> 13 sample13    -0.866          0   0.195   0.165      -1.28    0.0480  #> 14 sample14     0.909          3   0.433  -0.000192    0.656  -0.179   #> 15 sample15     0.647          2   0.971   0.0167     -0.503   0.163   #> 16 sample16     0.749          2   0.905  -0.0463     -0.115   0.00550 #> 17 sample17     0.344          1   0.0661 -0.0334      0.401  -0.0898  #> 18 sample18    -0.322          0  -0.751   0.0160      0.788  -0.376   #> 19 sample19    -1.10           0  -0.466  -0.0592     -0.488  -0.0839  #> 20 sample20     0.809          3   0.269   0.353       0.462  -0.275"},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":null,"dir":"Reference","previous_headings":"","what":"Score samples by gene signatures — hack_sig","title":"Score samples by gene signatures — hack_sig","text":"Compute gene signature single sample scores one different ways. can choose apply either original procedure one three single sample scoring methods: combined z-score (Lee et al., 2008), single sample GSEA (Barbie et al., 2009) singscore method (Foroutan et al., 2018).","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score samples by gene signatures — hack_sig","text":"","code":"hack_sig(   expr_data,   signatures = \"all\",   method = \"original\",   direction = \"none\",   sample_norm = \"raw\",   rank_norm = \"none\",   alpha = 0.25 )"},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score samples by gene signatures — hack_sig","text":"expr_data normalized gene expression matrix (data frame) gene symbols row names samples columns. signatures can list signatures character vector indicating keywords group signatures. default (\"\") cause function compute single sample scores signatures implemented hacksig. method character string specifying method use computing single sample score signature. can choose one : \"original\", original method used authors signature; \"zscore\", combined z-score method; \"ssgsea\", single sample GSEA method; \"singscore\", singscore method; direction character string specifying singscore computation method depending direction signatures. Can : \"none\" (default), undirected signatures, know whether genes - -regulated; \"\", genes signature supposed -regulated; \"\", genes signature supposed -regulated; sample_norm character string specifying type normalization affecting single sample GSEA scores. Can one : \"raw\" (default), obtain raw scores; \"separate\", normalize raw scores \\([0, 1]\\) across samples signature separately. \"\", normalize raw scores across samples signatures. rank_norm character string specifying gene expression ranks normalized single sample GSEA procedure. Valid choices : \"none\" (default), rank normalization; \"rank\", ranks multiplied 10000 / nrow(expr_data); \"logrank\", normalized ranks logged. alpha numeric scalar. Exponent running sum single sample GSEA score calculation weighs gene ranks. Defaults \\(\\alpha = 0.25\\).","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score samples by gene signatures — hack_sig","text":"tibble one row sample expr_data, column sample_id indicating sample identifiers one column input signature giving single sample scores.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Score samples by gene signatures — hack_sig","text":"\"original\" method, intended procedure used original publication authors computing signature score. hack_sig() can compute signature scores original method relatively simple procedure (e.g weighted sum fitted model coefficients expression values). complex methods, CINSARC, ESTIMATE Immunophenoscore, use dedicated functions. signatures custom list gene signatures, \"ssgsea\" method applied default.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"algorithm","dir":"Reference","previous_headings":"","what":"Algorithm","title":"Score samples by gene signatures — hack_sig","text":"section gives brief explanation single sample scores obtained different methods.","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"combined-z-score","dir":"Reference","previous_headings":"","what":"Combined z-score","title":"Score samples by gene signatures — hack_sig","text":"Gene expression values centered mean value scaled standard deviation across samples gene (z-scores). , sample signature, corresponding z-scores added divided square root signature size (.e. number genes composing signature). combined z-score method also implemented R package GSVA (Hänzelmann et al., 2013).","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"single-sample-gsea","dir":"Reference","previous_headings":"","what":"Single sample GSEA","title":"Score samples by gene signatures — hack_sig","text":"sample, genes ranked expression value increasing order rank normalization may follow (see argument rank_norm). , two probability-like vectors computed sample signature: \\(P_{}\\), cumulative sum weighted ranks divided total sum genes signature; \\(P_{}\\), cumulative sum ones (indicating genes signature) divided number genes signature. single sample GSEA score obtained adding elements vector difference \\(P_{} - P_{}\\). Finally, single sample scores normalized either across samples across gene signatures samples. single sample GSEA method also implemented R package GSVA (Hänzelmann et al., 2013).","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"singscore","dir":"Reference","previous_headings":"","what":"Singscore","title":"Score samples by gene signatures — hack_sig","text":"signatures whose genes supposed - -regulated, genes ranked expression value increasing decreasing order, respectively. signatures whose direction unknown, genes ranked absolute expression increasing order median-centered. Enrichment scores computed sample signature averaging gene ranks genes signature. Finally, normalized scores obtained subtracting theoretical minimum mean rank score dividing difference theoretical maximum minimum mean ranks. hacksig implementation method works unidirectional (.e. genes - -regulated) undirected gene signatures. want get single sample scores bidirectional gene signatures (.e. signatures composed - -regulated genes), please use R package singscore (Foroutan et al., 2018).","code":""},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Score samples by gene signatures — hack_sig","text":"Barbie, D. ., Tamayo, P., Boehm, J. S., Kim, S. Y., Moody, S. E., Dunn, . F., Schinzel, . C., Sandy, P., Meylan, E., Scholl, C., Fröhling, S., Chan, E. M., Sos, M. L., Michel, K., Mermel, C., Silver, S. J., Weir, B. ., Reiling, J. H., Sheng, Q., Gupta, P. B., … Hahn, W. C. (2009). Systematic RNA interference reveals oncogenic KRAS-driven cancers require TBK1. Nature, 462(7269), 108–112. doi:10.1038/nature08460 . Foroutan, M., Bhuva, D. D., Lyu, R., Horan, K., Cursons, J., & Davis, M. J. (2018). Single sample scoring molecular phenotypes. BMC bioinformatics, 19(1), 404. doi:10.1186/s12859-018-2435-4 . Hänzelmann, S., Castelo, R., & Guinney, J. (2013). GSVA: gene set variation analysis microarray RNA-seq data. BMC bioinformatics, 14, 7. doi:10.1186/1471-2105-14-7 . Lee, E., Chuang, H. Y., Kim, J. W., Ideker, T., & Lee, D. (2008). Inferring pathway activity toward precise disease classification. PLoS computational biology, 4(11), e1000217. doi:10.1371/journal.pcbi.1000217 .","code":""},{"path":[]},{"path":"https://acare.github.io/hacksig/reference/hack_sig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score samples by gene signatures — hack_sig","text":"","code":"# Raw ssGSEA scores for all implemented signatures can be obtained with: hack_sig(test_expr, method = \"ssgsea\") #> Warning: ℹ No genes are present in 'expr_data' for the following signatures: #> ✖ zhu2021_ferroptosis #> ✖ rooney2015_cyt #> # A tibble: 20 × 39 #>    sample_id ayers2017_immexp bai2019_immune cinsarc dececco2014_int172 #>    <chr>                <dbl>          <dbl>   <dbl>              <dbl> #>  1 sample1            -3914.           2316.   -13.5              1288. #>  2 sample10            1077.            575.   801.                811. #>  3 sample11             501.           -490.  1340.               1244. #>  4 sample12            2315.           1034.  -151.                981. #>  5 sample13           -2179.            327.  1737.               1288. #>  6 sample14            1274.           2551.  1792.               1118. #>  7 sample15             668.           4211.   734.                961. #>  8 sample16           -1014.           1283.  1123.                867. #>  9 sample17            -476.           2509.   384.               2175. #> 10 sample18            1101.           -315.  1911.                985. #> 11 sample19            3938.           3566.  -220.               1959. #> 12 sample2            -3348.           1350. -1070.               1322. #> 13 sample20            1261.            975.  1442.                703. #> 14 sample3             1697.           1829.  1805.                685. #> 15 sample4              366.           5611.   326.               1684. #> 16 sample5              969.           1224.   290.                718. #> 17 sample6             3820.           -507.   782.                382. #> 18 sample7              920.           3452.  1835.               1230. #> 19 sample8              -13.8          -229.   462.                966. #> 20 sample9             1819.           3073.   824.                525. #> # ℹ 34 more variables: eschrich2009_rsi <dbl>, estimate_immune <dbl>, #> #   estimate_stromal <dbl>, eustace2013_hypoxia <dbl>, #> #   fan2021_ferroptosis <dbl>, fang2021_irgs <dbl>, han2021_ferroptosis <dbl>, #> #   he2021_ferroptosis_a <dbl>, he2021_ferroptosis_b <dbl>, hu2021_derbp <dbl>, #> #   huang2022_ferroptosis <dbl>, ips_cp <dbl>, ips_ec <dbl>, ips_mhc <dbl>, #> #   ips_sc <dbl>, li2021_ferroptosis_a <dbl>, li2021_ferroptosis_b <dbl>, #> #   li2021_ferroptosis_c <dbl>, li2021_ferroptosis_d <dbl>, …  # To obtain 0-1 normalized ssGSEA scores, use: hack_sig(test_expr, method = \"ssgsea\", sample_norm = \"separate\") #> Warning: ℹ No genes are present in 'expr_data' for the following signatures: #> ✖ zhu2021_ferroptosis #> ✖ rooney2015_cyt #> # A tibble: 20 × 39 #>    sample_id ayers2017_immexp bai2019_immune cinsarc dececco2014_int172 #>    <chr>                <dbl>          <dbl>   <dbl>              <dbl> #>  1 sample1             0             0.461     0.354             0.505  #>  2 sample10            0.636         0.177     0.628             0.239  #>  3 sample11            0.562         0.00273   0.808             0.481  #>  4 sample12            0.793         0.252     0.308             0.334  #>  5 sample13            0.221         0.136     0.942             0.505  #>  6 sample14            0.661         0.500     0.960             0.411  #>  7 sample15            0.584         0.771     0.605             0.323  #>  8 sample16            0.369         0.293     0.736             0.271  #>  9 sample17            0.438         0.493     0.488             1      #> 10 sample18            0.639         0.0314    1                 0.337  #> 11 sample19            1             0.666     0.285             0.880  #> 12 sample2             0.0721        0.303     0                 0.524  #> 13 sample20            0.659         0.242     0.842             0.179  #> 14 sample3             0.715         0.382     0.964             0.169  #> 15 sample4             0.545         1         0.468             0.726  #> 16 sample5             0.622         0.283     0.456             0.188  #> 17 sample6             0.985         0         0.621             0      #> 18 sample7             0.616         0.647     0.974             0.473  #> 19 sample8             0.497         0.0454    0.514             0.326  #> 20 sample9             0.730         0.585     0.635             0.0796 #> # ℹ 34 more variables: eschrich2009_rsi <dbl>, estimate_immune <dbl>, #> #   estimate_stromal <dbl>, eustace2013_hypoxia <dbl>, #> #   fan2021_ferroptosis <dbl>, fang2021_irgs <dbl>, han2021_ferroptosis <dbl>, #> #   he2021_ferroptosis_a <dbl>, he2021_ferroptosis_b <dbl>, hu2021_derbp <dbl>, #> #   huang2022_ferroptosis <dbl>, ips_cp <dbl>, ips_ec <dbl>, ips_mhc <dbl>, #> #   ips_sc <dbl>, li2021_ferroptosis_a <dbl>, li2021_ferroptosis_b <dbl>, #> #   li2021_ferroptosis_c <dbl>, li2021_ferroptosis_d <dbl>, …  # You can also change the exponent of the ssGSEA running sum with: hack_sig(test_expr, method = \"ssgsea\", sample_norm = \"separate\", alpha = 0.5) #> Warning: ℹ No genes are present in 'expr_data' for the following signatures: #> ✖ zhu2021_ferroptosis #> ✖ rooney2015_cyt #> # A tibble: 20 × 39 #>    sample_id ayers2017_immexp bai2019_immune cinsarc dececco2014_int172 #>    <chr>                <dbl>          <dbl>   <dbl>              <dbl> #>  1 sample1             0              0.684    0.263            0.487   #>  2 sample10            0.741          0.186    0.659            0.316   #>  3 sample11            0.574          0.0486   0.811            0.562   #>  4 sample12            0.779          0.280    0.310            0.394   #>  5 sample13            0.268          0.112    1                0.502   #>  6 sample14            0.705          0.503    0.960            0.568   #>  7 sample15            0.674          0.746    0.625            0.507   #>  8 sample16            0.461          0.299    0.770            0.298   #>  9 sample17            0.443          0.481    0.424            1       #> 10 sample18            0.699          0.0223   0.987            0.403   #> 11 sample19            1              0.716    0.318            0.890   #> 12 sample2             0.0732         0.325    0                0.537   #> 13 sample20            0.730          0.399    0.886            0.128   #> 14 sample3             0.747          0.363    0.980            0.153   #> 15 sample4             0.555          1        0.468            0.838   #> 16 sample5             0.639          0.360    0.501            0.220   #> 17 sample6             0.966          0        0.693            0       #> 18 sample7             0.622          0.644    0.985            0.466   #> 19 sample8             0.498          0.0902   0.525            0.395   #> 20 sample9             0.825          0.584    0.557            0.00933 #> # ℹ 34 more variables: eschrich2009_rsi <dbl>, estimate_immune <dbl>, #> #   estimate_stromal <dbl>, eustace2013_hypoxia <dbl>, #> #   fan2021_ferroptosis <dbl>, fang2021_irgs <dbl>, han2021_ferroptosis <dbl>, #> #   he2021_ferroptosis_a <dbl>, he2021_ferroptosis_b <dbl>, hu2021_derbp <dbl>, #> #   huang2022_ferroptosis <dbl>, ips_cp <dbl>, ips_ec <dbl>, ips_mhc <dbl>, #> #   ips_sc <dbl>, li2021_ferroptosis_a <dbl>, li2021_ferroptosis_b <dbl>, #> #   li2021_ferroptosis_c <dbl>, li2021_ferroptosis_d <dbl>, …  # To obtain combined z-scores for custom gene signatures, use: custom_list <- list(rand_sig1 = rownames(test_expr)[1:5],                     rand_sig2 = c(rownames(test_expr)[6:8], \"RANDOMGENE\")) hack_sig(test_expr, custom_list, method = \"zscore\") #> # A tibble: 20 × 3 #>    sample_id rand_sig1 rand_sig2 #>    <chr>         <dbl>     <dbl> #>  1 sample1      0.601     0.160  #>  2 sample10    -0.907    -0.440  #>  3 sample11    -1.06     -0.0717 #>  4 sample12    -1.46     -0.0504 #>  5 sample13    -0.177    -0.204  #>  6 sample14    -0.484    -2.43   #>  7 sample15     0.868     0.0577 #>  8 sample16    -0.266     1.94   #>  9 sample17    -0.146    -0.0410 #> 10 sample18     0.456     0.895  #> 11 sample19    -0.0522   -0.142  #> 12 sample2     -2.03     -0.230  #> 13 sample20     0.258     0.879  #> 14 sample3      1.27      1.65   #> 15 sample4      0.899    -0.498  #> 16 sample5      0.963    -0.520  #> 17 sample6      1.61      0.703  #> 18 sample7     -1.11     -1.11   #> 19 sample8      2.11     -0.190  #> 20 sample9     -1.35     -0.364"},{"path":"https://acare.github.io/hacksig/reference/hacksig.html","id":null,"dir":"Reference","previous_headings":"","what":"hacksig: A Tidy Framework to Hack Gene Expression Signatures — hacksig","title":"hacksig: A Tidy Framework to Hack Gene Expression Signatures — hacksig","text":"hacksig package designed purpose simplifying way gene expression signatures scores computed. manually curated collection gene expression signatures found literature makes use three different single sample score calculation methods. Moreover, parallel computation supported future framework.","code":""},{"path":"https://acare.github.io/hacksig/reference/hacksig.html","id":"get-gene-signatures-scores-in-different-ways","dir":"Reference","previous_headings":"","what":"Get gene signatures scores in different ways","title":"hacksig: A Tidy Framework to Hack Gene Expression Signatures — hacksig","text":"main function package hack_sig() can used : obtain single sample scores one three methods (z-score, ssGSEA, singscore) custom list gene signatures; obtain single sample scores number manually curated gene signatures either original publication method one three single sample methods. single sample scores obtained, can assign samples signature classes stratify_sig(). addition, complex methods implemented : hack_cinsarc(), CINSARC classification; hack_estimate(), ESTIMATE method; hack_immunophenoscore(), Immunophenoscore. Information implemented signatures can obtained get_sig_info().","code":""},{"path":"https://acare.github.io/hacksig/reference/hacksig.html","id":"check-if-gene-signatures-are-applicable-to-your-data","dir":"Reference","previous_headings":"","what":"Check if gene signatures are applicable to your data","title":"hacksig: A Tidy Framework to Hack Gene Expression Signatures — hacksig","text":"Sometimes gene expression matrix can miss genes due prior filtering procedure. function check_sig() can used check many genes expression matrix contain every input signature.","code":""},{"path":[]},{"path":"https://acare.github.io/hacksig/reference/hacksig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hacksig: A Tidy Framework to Hack Gene Expression Signatures — hacksig","text":"Andrea Carenzo, Loris De Cecco, Federico Pistore","code":""},{"path":"https://acare.github.io/hacksig/reference/ss_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Single sample scoring methods — ss_methods","title":"Single sample scoring methods — ss_methods","text":"internal functions compute single sample scores list gene signatures three different ways: combined z-score (Lee et al., 2008); single sample GSEA (Barbie et al., 2009); singscore (Foroutan et al., 2018). compute_ssgsea() called hack_estimate() whereas three methods called hack_sig().","code":""},{"path":"https://acare.github.io/hacksig/reference/ss_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single sample scoring methods — ss_methods","text":"","code":"compute_zscore(expr_data, signatures)  compute_ssgsea(   expr_data,   signatures,   sample_norm = \"raw\",   rank_norm = \"none\",   alpha = 0.25 )  compute_singscore(expr_data, signatures, direction = \"none\")"},{"path":"https://acare.github.io/hacksig/reference/ss_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single sample scoring methods — ss_methods","text":"expr_data normalized gene expression matrix (data frame) gene symbols row names samples columns. signatures named list gene signatures. sample_norm character string specifying type normalization affecting single sample GSEA scores. Can one : \"raw\" (default), obtain raw scores; \"separate\", normalize raw scores \\([0, 1]\\) across samples signature separately. \"\", normalize raw scores across samples signatures. rank_norm character string specifying gene expression ranks normalized single sample GSEA procedure. Valid choices : \"none\" (default), rank normalization; \"rank\", ranks multiplied 10000 / nrow(expr_data); \"logrank\", normalized ranks logged. alpha numeric scalar. Exponent running sum single sample GSEA score calculation weighs gene ranks. Defaults \\(\\alpha = 0.25\\). direction character string specifying singscore computation method depending direction signatures. Can : \"none\" (default), undirected signatures, know whether genes - -regulated; \"\", genes signature supposed -regulated; \"\", genes signature supposed -regulated;","code":""},{"path":"https://acare.github.io/hacksig/reference/ss_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single sample scoring methods — ss_methods","text":"tibble one row sample expr_data, column sample_id indicating sample identifiers one column input signature giving single sample scores.","code":""},{"path":"https://acare.github.io/hacksig/reference/ss_methods.html","id":"algorithm","dir":"Reference","previous_headings":"","what":"Algorithm","title":"Single sample scoring methods — ss_methods","text":"section gives brief explanation single sample scores obtained different methods.","code":""},{"path":"https://acare.github.io/hacksig/reference/ss_methods.html","id":"combined-z-score","dir":"Reference","previous_headings":"","what":"Combined z-score","title":"Single sample scoring methods — ss_methods","text":"Gene expression values centered mean value scaled standard deviation across samples gene (z-scores). , sample signature, corresponding z-scores added divided square root signature size (.e. number genes composing signature). combined z-score method also implemented R package GSVA (Hänzelmann et al., 2013).","code":""},{"path":"https://acare.github.io/hacksig/reference/ss_methods.html","id":"single-sample-gsea","dir":"Reference","previous_headings":"","what":"Single sample GSEA","title":"Single sample scoring methods — ss_methods","text":"sample, genes ranked expression value increasing order rank normalization may follow (see argument rank_norm). , two probability-like vectors computed sample signature: \\(P_{}\\), cumulative sum weighted ranks divided total sum genes signature; \\(P_{}\\), cumulative sum ones (indicating genes signature) divided number genes signature. single sample GSEA score obtained adding elements vector difference \\(P_{} - P_{}\\). Finally, single sample scores normalized either across samples across gene signatures samples. single sample GSEA method also implemented R package GSVA (Hänzelmann et al., 2013).","code":""},{"path":"https://acare.github.io/hacksig/reference/ss_methods.html","id":"singscore","dir":"Reference","previous_headings":"","what":"Singscore","title":"Single sample scoring methods — ss_methods","text":"signatures whose genes supposed - -regulated, genes ranked expression value increasing decreasing order, respectively. signatures whose direction unknown, genes ranked absolute expression increasing order median-centered. Enrichment scores computed sample signature averaging gene ranks genes signature. Finally, normalized scores obtained subtracting theoretical minimum mean rank score dividing difference theoretical maximum minimum mean ranks. hacksig implementation method works unidirectional (.e. genes - -regulated) undirected gene signatures. want get single sample scores bidirectional gene signatures (.e. signatures composed - -regulated genes), please use R package singscore (Foroutan et al., 2018).","code":""},{"path":"https://acare.github.io/hacksig/reference/ss_methods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Single sample scoring methods — ss_methods","text":"Barbie, D. ., Tamayo, P., Boehm, J. S., Kim, S. Y., Moody, S. E., Dunn, . F., Schinzel, . C., Sandy, P., Meylan, E., Scholl, C., Fröhling, S., Chan, E. M., Sos, M. L., Michel, K., Mermel, C., Silver, S. J., Weir, B. ., Reiling, J. H., Sheng, Q., Gupta, P. B., … Hahn, W. C. (2009). Systematic RNA interference reveals oncogenic KRAS-driven cancers require TBK1. Nature, 462(7269), 108–112. doi:10.1038/nature08460 . Foroutan, M., Bhuva, D. D., Lyu, R., Horan, K., Cursons, J., & Davis, M. J. (2018). Single sample scoring molecular phenotypes. BMC bioinformatics, 19(1), 404. doi:10.1186/s12859-018-2435-4 . Hänzelmann, S., Castelo, R., & Guinney, J. (2013). GSVA: gene set variation analysis microarray RNA-seq data. BMC bioinformatics, 14, 7. doi:10.1186/1471-2105-14-7 . Lee, E., Chuang, H. Y., Kim, J. W., Ideker, T., & Lee, D. (2008). Inferring pathway activity toward precise disease classification. PLoS computational biology, 4(11), e1000217. doi:10.1371/journal.pcbi.1000217 .","code":""},{"path":[]},{"path":"https://acare.github.io/hacksig/reference/stratify_sig.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratify samples into classes — stratify_sig","title":"Stratify samples into classes — stratify_sig","text":"stratify_sig() supposed used combination hack_sig() order classify samples one two signature classes.","code":""},{"path":"https://acare.github.io/hacksig/reference/stratify_sig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratify samples into classes — stratify_sig","text":"","code":"stratify_sig(sig_data, cutoff = \"original\", probs = seq(0, 1, 0.25))"},{"path":"https://acare.github.io/hacksig/reference/stratify_sig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratify samples into classes — stratify_sig","text":"sig_data tibble result call hack_sig(). cutoff character specifying function use categorize samples signature scores. Can one : \"original\" (default), apply original publication method; categorization expected, median score used threshold; \"mean\"/\"median\", samples classified \"low\" \"high\" respect mean/median signature score, respectively; \"quantile\", samples classified signature score quantiles; probs numeric vector probabilities values [0, 1] use combination cutoff = \"quantile\". default, corresponds quartiles (c(0, 0.25, 0.5, 0.75, 1)).","code":""},{"path":"https://acare.github.io/hacksig/reference/stratify_sig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratify samples into classes — stratify_sig","text":"tibble dimension sig_data, column sample_id sample identifiers one column input signature giving sample classes.","code":""},{"path":[]},{"path":"https://acare.github.io/hacksig/reference/stratify_sig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratify samples into classes — stratify_sig","text":"","code":"scores <- hack_sig(test_expr, \"immune\") #> Warning: ℹ No genes are present in 'expr_data' for the following signatures: #> ✖ rooney2015_cyt #> ℹ To obtain CINSARC, ESTIMATE and Immunophenoscore with the original procedures, see: #> ?hack_cinsarc #> ?hack_estimate #> ?hack_immunophenoscore stratify_sig(scores) #> # A tibble: 20 × 19 #>    sample_id ayers2017_immexp bai2019_immune fan2021_ferroptosis fang2021_irgs #>    <chr>     <chr>            <chr>          <chr>               <chr>         #>  1 sample1   low              high           high                low           #>  2 sample10  low              high           high                low           #>  3 sample11  high             high           low                 high          #>  4 sample12  high             high           high                high          #>  5 sample13  low              high           low                 low           #>  6 sample14  high             low            low                 low           #>  7 sample15  low              low            low                 high          #>  8 sample16  low              high           high                low           #>  9 sample17  low              high           low                 low           #> 10 sample18  low              low            low                 high          #> 11 sample19  high             low            high                high          #> 12 sample2   low              low            high                low           #> 13 sample20  high             high           low                 high          #> 14 sample3   high             low            high                high          #> 15 sample4   high             low            high                low           #> 16 sample5   high             low            low                 high          #> 17 sample6   high             high           high                high          #> 18 sample7   high             low            low                 low           #> 19 sample8   low              high           low                 high          #> 20 sample9   low              low            high                low           #> # ℹ 14 more variables: he2021_ferroptosis_a <chr>, he2021_ferroptosis_b <chr>, #> #   huang2022_ferroptosis <chr>, li2021_ferroptosis_c <chr>, #> #   li2021_ferroptosis_d <chr>, li2021_irgs <chr>, liu2020_immune <chr>, #> #   liu2021_mgs <chr>, lu2020_npc <chr>, lu2021_ferroptosis <chr>, #> #   qiang2021_irgs <chr>, she2020_irgs <chr>, xu2021_ferroptosis <chr>, #> #   zou2020_npc <chr>"},{"path":"https://acare.github.io/hacksig/reference/test_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"A toy gene expression matrix — test_expr","title":"A toy gene expression matrix — test_expr","text":"gene expression matrix simulating expression profiles 20 samples. used testing purpose.","code":""},{"path":"https://acare.github.io/hacksig/reference/test_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A toy gene expression matrix — test_expr","text":"","code":"test_expr"},{"path":"https://acare.github.io/hacksig/reference/test_expr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A toy gene expression matrix — test_expr","text":"random normal data matrix 20000 genes rows 20 samples columns.","code":""},{"path":"https://acare.github.io/hacksig/reference/test_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A toy gene expression matrix — test_expr","text":"","code":"class(test_expr) #> [1] \"matrix\" \"array\"  dim(test_expr) #> [1] 20000    20 check_sig(test_expr) #> # A tibble: 40 × 5 #>    signature_id              n_genes n_present frac_present missing_genes #>    <chr>                       <int>     <int>        <dbl> <list>        #>  1 wu2020_metabolic               30        20        0.667 <chr [10]>    #>  2 muro2016_ifng                   6         4        0.667 <chr [2]>     #>  3 liu2020_immune                  6         4        0.667 <chr [2]>     #>  4 liu2021_mgs                     6         4        0.667 <chr [2]>     #>  5 lu2020_npc                      3         2        0.667 <chr [1]>     #>  6 estimate_stromal              141        91        0.645 <chr [50]>    #>  7 she2020_irgs                   27        17        0.630 <chr [10]>    #>  8 lohavanichbutr2013_hpvneg      13         8        0.615 <chr [5]>     #>  9 eschrich2009_rsi               10         6        0.6   <chr [4]>     #> 10 li2021_ferroptosis_a           10         6        0.6   <chr [4]>     #> # ℹ 30 more rows"},{"path":"https://acare.github.io/hacksig/news/index.html","id":"hacksig-020","dir":"Changelog","previous_headings":"","what":"hacksig 0.2.0","title":"hacksig 0.2.0","text":"Added 17 new signatures related ferroptosis nasopharyngeal cancer; Added citation info; Added new vignette listing implemented signatures searchable table; New package site built pkgdown available GitHub; hack_class renamed stratify_sig(); Removed dplyr tidyr dependencies favor data.table.","code":""},{"path":"https://acare.github.io/hacksig/news/index.html","id":"hacksig-012","dir":"Changelog","previous_headings":"","what":"hacksig 0.1.2","title":"hacksig 0.1.2","text":"CRAN release: 2022-02-17 Fixed hack_sig() method = \"singscore\" direction = \"none\".","code":""},{"path":"https://acare.github.io/hacksig/news/index.html","id":"hacksig-011","dir":"Changelog","previous_headings":"","what":"hacksig 0.1.1","title":"hacksig 0.1.1","text":"CRAN release: 2021-12-02 Initial CRAN submission.","code":""}]
